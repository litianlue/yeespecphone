package com.geetion.microscope_android.utils;import android.util.Log;import java.io.BufferedInputStream;import java.io.BufferedOutputStream;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.util.zip.GZIPInputStream;import java.util.zip.GZIPOutputStream;import java.util.zip.ZipEntry;import java.util.zip.ZipInputStream;import java.util.zip.ZipOutputStream;/** * Created by virgilyan on 15/12/4. */public class ByteZip {    /***     * 压缩GZip     *     * @param data     * @return     */    public static byte[] gZip(byte[] data) {        byte[] b = null;        ByteArrayOutputStream bos = null;        GZIPOutputStream gzip = null;        try {            bos = new ByteArrayOutputStream();            gzip = new GZIPOutputStream(bos);            gzip.write(data);            gzip.finish();            gzip.close();            b = bos.toByteArray();            bos.close();        } catch (Exception ex) {            ex.printStackTrace();        } finally {            try {//关闭资源输入输出流 :                if (gzip != null) {                    gzip.close();                }            } catch (IOException e) {                e.printStackTrace();            } finally {                try {//关闭资源输入输出流 :                    if (bos != null) {                        bos.close();                    }                } catch (IOException e) {                    e.printStackTrace();                } finally {                }            }        }        return b;    }    /***     * 解压GZip     *     * @param data     * @return     */    public static byte[] unGZip(byte[] data) {        byte[] b = null;        ByteArrayInputStream bis = null;        GZIPInputStream gzip = null;        ByteArrayOutputStream baos = null;        try {            byte[] buf = new byte[1024];            bis = new ByteArrayInputStream(data);            gzip = new GZIPInputStream(bis);            int num = -1;            baos = new ByteArrayOutputStream();            while ((num = gzip.read(buf, 0, buf.length)) != -1) {                baos.write(buf, 0, num);            }            b = baos.toByteArray();            baos.flush();            baos.close();            gzip.close();            bis.close();        } catch (Exception ex) {            ex.printStackTrace();        } finally {            try {//关闭资源输入输出流 :                if (baos != null) {                    baos.close();                }            } catch (IOException e) {                e.printStackTrace();            } finally {                try {//关闭资源输入输出流 :                    if (gzip != null) {                        gzip.close();                    }                } catch (IOException e) {                    e.printStackTrace();                } finally {                    try {//关闭资源输入输出流 :                        if (bis != null) {                            bis.close();                        }                    } catch (IOException e) {                        e.printStackTrace();                    } finally {                    }                }            }        }        return b;    }    /***     * 压缩Zip     *     * @param data     * @return     */    public static byte[] zip(byte[] data) {        byte[] b = null;        ByteArrayOutputStream bos = null;        ZipOutputStream zip = null;        try {            bos = new ByteArrayOutputStream();            zip = new ZipOutputStream(bos);            ZipEntry entry = new ZipEntry("zip");            entry.setSize(data.length);            zip.putNextEntry(entry);            zip.write(data);            zip.closeEntry();            zip.close();            b = bos.toByteArray();            bos.close();        } catch (Exception ex) {            ex.printStackTrace();        } finally {            try {//关闭资源输入输出流 :                if (zip != null) {                    zip.close();                }            } catch (IOException e) {                e.printStackTrace();            } finally {                try {//关闭资源输入输出流 :                    if (bos != null) {                        bos.close();                    }                } catch (IOException e) {                    e.printStackTrace();                } finally {                }            }        }        return b;    }    /***     * 解压Zip     *     * @param data     * @return     */    public static byte[] unZip(byte[] data) {        byte[] b = null;        ByteArrayInputStream bis = null;        ZipInputStream zip = null;        ByteArrayOutputStream baos = null;        try {            bis = new ByteArrayInputStream(data);            zip = new ZipInputStream(bis);            while (zip.getNextEntry() != null) {                byte[] buf = new byte[1024];                int num = -1;                baos = new ByteArrayOutputStream();                while ((num = zip.read(buf, 0, buf.length)) != -1) {                    baos.write(buf, 0, num);                }                b = baos.toByteArray();                baos.flush();                baos.close();            }            zip.close();            bis.close();        } catch (Exception ex) {            ex.printStackTrace();        } finally {            try {//关闭资源输入输出流 :                if (baos != null) {                    baos.close();                }            } catch (IOException e) {                e.printStackTrace();            } finally {                try {//关闭资源输入输出流 :                    if (zip != null) {                        zip.close();                    }                } catch (IOException e) {                    e.printStackTrace();                } finally {                    try {//关闭资源输入输出流 :                        if (bis != null) {                            bis.close();                        }                    } catch (IOException e) {                        e.printStackTrace();                    } finally {                    }                }            }        }        return b;    }    /**     * 把字节数组转换成16进制字符串     *     * @param bArray     * @return     */    public static String bytesToHexString(byte[] bArray) {        StringBuffer sb = new StringBuffer(bArray.length);        String sTemp;        for (int i = 0; i < bArray.length; i++) {            sTemp = Integer.toHexString(0xFF & bArray[i]);            if (sTemp.length() < 2)                sb.append(0);            sb.append(sTemp.toUpperCase());        }        return sb.toString();    }    public static void main(String[] args) {        String s = "this is a test";        byte[] b1 = zip(s.getBytes());        System.out.println("zip:" + bytesToHexString(b1));        byte[] b2 = unZip(b1);        System.out.println("unZip:" + new String(b2));        byte[] b5 = gZip(s.getBytes());        System.out.println("bZip2:" + bytesToHexString(b5));        byte[] b6 = unGZip(b5);        System.out.println("unBZip2:" + new String(b6));    }    //解压成文件    public static void Unzip(String zipFile, String targetDir) {        int BUFFER = 4096; //这里缓冲区我们使用4KB，        String strEntry; //保存每个zip的条目名称        FileInputStream fis = null;        ZipInputStream zis = null;        FileOutputStream fos = null;        BufferedOutputStream dest = null; //缓冲输出流        try {            fis = new FileInputStream(zipFile);            zis = new ZipInputStream(new BufferedInputStream(fis));            ZipEntry entry; //每个zip条目的实例            while ((entry = zis.getNextEntry()) != null) {                try {                    Log.i("Unzip: ", "=" + entry);                    int count;                    byte data[] = new byte[BUFFER];                    strEntry = entry.getName();                    File entryFile = new File(targetDir + strEntry);                    File entryDir = new File(entryFile.getParent());                    if (!entryDir.exists()) {                        entryDir.mkdirs();                    }                    fos = new FileOutputStream(entryFile);                    dest = new BufferedOutputStream(fos, BUFFER);                    while ((count = zis.read(data, 0, BUFFER)) != -1) {                        dest.write(data, 0, count);                    }                    dest.flush();                    dest.close();                } catch (Exception ex) {                    ex.printStackTrace();                }            }            fos.close();            zis.close();        } catch (Exception cwj) {            cwj.printStackTrace();        } finally {            try {//关闭资源输入输出流 :                if (dest != null) {                    dest.close();                }            } catch (IOException e) {                e.printStackTrace();            } finally {                try {//关闭资源输入输出流 :                    if (fos != null) {                        fos.close();                    }                } catch (IOException e) {                    e.printStackTrace();                } finally {                    try {//关闭资源输入输出流 :                        if (zis != null) {                            zis.close();                        }                    } catch (IOException e) {                        e.printStackTrace();                    } finally {                        try {//关闭资源输入输出流 :                            if (fis != null) {                                fis.close();                            }                        } catch (IOException e) {                            e.printStackTrace();                        } finally {                        }                    }                }            }        }    }}