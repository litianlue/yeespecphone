package com.geetion.microscope_android.activity;import android.app.AlertDialog;import android.app.Dialog;import android.content.BroadcastReceiver;import android.content.ComponentName;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.IntentFilter;import android.content.ServiceConnection;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.drawable.AnimationDrawable;import android.media.MediaCodec;import android.media.MediaFormat;import android.net.TrafficStats;import android.os.Bundle;import android.os.Handler;import android.os.IBinder;import android.os.Message;import android.os.PowerManager;import android.os.SystemClock;import android.provider.Contacts;import android.util.DisplayMetrics;import android.util.Log;import android.view.Display;import android.view.GestureDetector;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.SurfaceHolder;import android.view.SurfaceView;import android.view.View;import android.view.WindowManager;import android.widget.AdapterView;import android.widget.FrameLayout;import android.widget.ImageView;import android.widget.ListView;import android.widget.PopupWindow;import android.widget.ProgressBar;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import com.alibaba.fastjson.JSON;import com.android.volley.RequestQueue;import com.android.volley.Response;import com.android.volley.VolleyError;import com.android.volley.toolbox.ImageRequest;import com.android.volley.toolbox.Volley;import com.avos.avoscloud.AVException;import com.avos.avoscloud.AVFile;import com.avos.avoscloud.AVLiveQuery;import com.avos.avoscloud.AVLiveQueryEventHandler;import com.avos.avoscloud.AVLiveQuerySubscribeCallback;import com.avos.avoscloud.AVObject;import com.avos.avoscloud.AVQuery;import com.avos.avoscloud.AVSaveOption;import com.avos.avoscloud.AVUser;import com.avos.avoscloud.FindCallback;import com.avos.avoscloud.GetCallback;import com.avos.avoscloud.SaveCallback;import com.facebook.drawee.view.SimpleDraweeView;import com.geetion.coreOneUtil.UIUtil;import com.geetion.coreTwoUtil.GActivityManager;import com.geetion.coreTwoUtil.GScreenUtils;import com.geetion.fresco.tool.FrescoTool;import com.geetion.log.Logger;import com.geetion.microscope_android.R;import com.geetion.microscope_android.adapter.Contrack_Set_Adapter;import com.geetion.microscope_android.application.BaseApplication;import com.geetion.microscope_android.capricorn.CircularSeekBar;import com.geetion.microscope_android.capricorn.RayMenu;import com.geetion.microscope_android.custom.MoveImageview;import com.geetion.microscope_android.service.Constant;import com.geetion.microscope_android.service.DataDepot;import com.geetion.microscope_android.service.MasterService;import com.geetion.microscope_android.service.http.CommonActionCallBackString;import com.geetion.microscope_android.service.webSocket.BaseWebSocketCallback;import com.geetion.microscope_android.utils.ByteUtil;import com.geetion.microscope_android.utils.ByteZip;import com.geetion.microscope_android.utils.ConstanUtil;import com.geetion.microscope_android.utils.DataUtil;import com.geetion.microscope_android.utils.GrothRateDialog;import com.geetion.microscope_android.utils.HttpUtil;import com.geetion.microscope_android.utils.SPUtils;import com.geetion.microscope_android.widget.RockerView;import com.geetion.microscope_android.widget.surfaceview.MediaCodecSurfaceView;import com.geetion.microscope_android.widget.surfaceview.OnDecodeListener;import com.geetion.microscope_android.widget.surfaceview.OnSupportListener;import com.geetion.xUtil.GBaseHttpParams;import com.geetion.xUtil.GXHttpManager;import com.geetion.xUtil.ResponeUtils;import com.github.mikephil.charting.charts.LineChart;import com.koushikdutta.async.ByteBufferList;import com.koushikdutta.async.DataEmitter;import com.koushikdutta.async.callback.DataCallback;import com.koushikdutta.async.future.Future;import com.koushikdutta.async.http.AsyncHttpClient;import com.koushikdutta.async.http.WebSocket;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import org.xutils.common.Callback;import org.xutils.ex.HttpException;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.InputStream;import java.lang.ref.SoftReference;import java.lang.ref.WeakReference;import java.nio.ByteBuffer;import java.util.ArrayList;import java.util.Arrays;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Set;import java.util.Timer;import java.util.TimerTask;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.ScheduledExecutorService;import java.util.concurrent.TimeUnit;import static android.content.Intent.ACTION_CLOSE_SYSTEM_DIALOGS;import static android.provider.MediaStore.MediaColumns.MIME_TYPE;/** * Created by WongzYe on 15/12/3. */public class MasterActivity extends BaseActivity implements View.OnClickListener {    private PowerManager powerManager = null;    private PowerManager.WakeLock wakeLock = null;    private String userName;    private static final String TAG = "MasterActivity";    private int lastISO = -1;//记录操作后的ISO值    private int lastBrightness = -1;//记录操作后的Brightness值    private int lastGamma = -1;//记录操作后的Gamma值    //主控件    public ImageView mCameraViewStub;    private View mRecordButton;    private View mStillCaptureButton;    private SimpleDraweeView btn_photo_album;    private ProgressBar tp_ProgressBar;    private ImageView mRecordView, mButtonCaptureButton;    private View timeView;    private TextView stepTimeTV, aotuFocusTV,cNuberTV;    //手势相关控件    private GestureDetector mGestureDetector;    private View mISOBrightnessLayout;    private ImageView mOperationBg;    private TextView mOperationPercent;    private ExplosionView mISOView;    private AnimationDrawable mFocusBackground;    private FrameLayout mLinearLayout;    private RelativeLayout brightnessSetup, focusSetup, isoSetup;    private ImageView brightnessDownMax, brightnessDownMid, brightnessDownMin, brightnessUpMax, brightnessUpMid, brightnessUpMin;    private ImageView focusDownMax, focusDownMid, focusDownMin, focusUpMax, focusUpMid, focusUpMin;    private ImageView isoDown, isoUp;    //2016.08.02 : 新增 : 设置标尺的单位数值 :    private TextView mScaleplateValueTextView;    public boolean scrolling;    //    private boolean isRecording;    private boolean recordResponsing;    //亮度和ISO发送数据    private int brightnessData;    private int gainData;    //发送请求类型    public static final int PARAM_TYPE_SATURATION = 2;    public static final int PARAM_TYPE_CONTRAST = 3;    public static final int PARAM_TYPE_VESSELS = 14;    public static final int PARAM_TYPE_ISO = 5;    public static final int PARAM_TYPE_BRIGHTNESS = 6;    public static final int PARAM_TYPE_MANUAL_FOCUS = 8;    public static final int PARAM_TYPE_GAMMA_DOMN = 19;    public static final int PARAM_TYPE_GAMMA = 9;    public static final int PARAM_TYPE_MANUAL_FOCUS_STOP = 10;    public static final int PARAM_TYPE_UPDAATE_PICTER = 15;    public static final int PARAM_TYPE_AUTOPHOTO = 16;//自动拍照    public static final int PARAM_TYPE_STOPAUTOPHOTO = 17;//暂停自动拍照    public static final int PARAM_TYPE_AUTOPHOTOPREPARE = 28;//准备自动拍照    public static final int PARAM_TYPE_SELF_CHECK = 31;//开启关闭自检程序    private Future<WebSocket> picAsyncScoket;    private Future<WebSocket> cameraInfoScoket;    private WebSocket cameraCMDScoket;    private Map<String, String> webScoketResult = new HashMap<>();    public static final int FLAG_HOMEKEY_DISPATCHED = 0x80000000; //是android4.0之后屏蔽Home键的方法。    public static final ScheduledExecutorService EXECUTOR_SERVICE = Executors.newScheduledThreadPool(1);    private ScheduledExecutorService DELAY_EXECUTORSERVICE = Executors.newScheduledThreadPool(2);//定时线程    private MyImgHandler myImgHandler = new MyImgHandler(this);    private MoveImageview focusimageview;    private TextView mphotoCount;    private CircularSeekBar autoPhotoProcess;    public static final int DISMISSPROCESSBAR_MESSAGE = 4;    public static final int UDATAUI_MESSAGE = 5;    public static final int UDATAPROCESSBAR_MESSAGE = 6;    public static final int UDATACAPTURE_MESSAGE = 7;    public static final int UDATASTARATION_MESSAGE = 8;    public static final int UDATATIMER_VIEW_MESSAGE = 9;    public static final int DISMISSTIMER_VIEW_MESSAGE = 10;    public static final int UDATAAUTOFOCUS_VIEW_MESSAGE = 11;    public static final int DISMISSAUTOFOCUS_VIEW_MESSAGE = 12;    public static final int UDATAAUTOFOCUS_VISSBLE_MESSAGE = 13;    public static final int DISMISSAUTOFOCUS_GONE_MESSAGE = 14;    public static final int UDATAAUTOFOCUS_PER_MESSAGE = 15;    public static final int UDATAREMENUCOLOR_MESSAGE = 16;    public static final int UDATA_MULTIPLE_MESSAGE = 17;    public static final int UDATA_RECORD_MESSAGE = 18;    public static final int DISMISS_RECORD_MESSAGE = 19;    public static final int DISMISS_STUBITMAP_MESSAGE = 20;    public static final int SHOW_AUTOPHOTO_DIALOG_MESSAGE = 21;    public static final int SHOW_EXPORT_DIALOG_MESSAGE = 22;    public static final int DISMISS_DELAY_DIALOG_MESSAGE = 23;    public static final int PARAM_TYPE_CONSTAST = 29;//对照组定位    public static final int PARAM_TYPE_ROCKERVIEW = 30;//摇杆控制    public static final int PARAM_TYPE_EXPORT = 32;//导出文件    public static final int UPADAT_IMAGE_MESSAGE = 35;    public static final int UPADAT_GROUTH_RATE= 36;    public static final int VIEW_MESSAGEI_UPADA = 37;    public static final int VIEW_MESSAGEII_UPADA = 38;    public static final int UPADAT_IAMGE_ALBUM = 39;    public static final int UPADAT_MESSAGE_LISTENING = 49;    private boolean updata = true;    private ProgressBar loadProgressBar;    private RockerView mRockerView;    private TextView t_priveiw;    private AVLiveQuery doingLiveQuery;    private long[] mHits = new long[3];    private MasterService bindService = null;    private boolean isbind = false;    private ServiceConnection conn = new ServiceConnection() {        @Override        public void onServiceConnected(ComponentName name, IBinder service) {            isbind =true;            MasterService.MyBinder binder = (MasterService.MyBinder) service;            bindService = binder.getService();            bindService.setHandler(myImgHandler);            bindService.setDismissHandler(mDismissHandler);            bindService.setActivity(MasterActivity.this);            bindService.init();            bindService.setUserName(userName);            bindService.setSurfaceview(mSurfaceView1);            int num = bindService.getRandomNumber();            Log.v("hjz","numA="+num);        }        //client 和service连接意外丢失时，会调用该方法        @Override        public void onServiceDisconnected(ComponentName name) {            Log.v("hjz","onServiceDisconnected  A");        }    };    private void bindservice(){        Intent  intent = new Intent(MasterActivity.this, MasterService.class);        intent.putExtra("from", "ActivityA");        bindService(intent,conn,BIND_AUTO_CREATE);    }    class MyImgHandler extends Handler {        WeakReference<MasterActivity> mactivity;        public MyImgHandler(MasterActivity masterActivity) {            mactivity = new WeakReference<MasterActivity>(masterActivity);        }        @Override        public void handleMessage(Message msg) {            super.handleMessage(msg);            switch (msg.what) {                case UPADAT_IMAGE_MESSAGE:                    if (ConstanUtil.remoteLogin) {                        Log.e("mMasterActivity", "setimage");                        synchronized (synchronos) {                            updata = true;                            mCameraViewStub.setImageBitmap(null);                            mCameraViewStub.setImageBitmap((Bitmap) msg.obj);                        }                    } else {                        //ConstanUtil.islogin=false;//是否登陆位                        if (!ConstanUtil.isSuccessLogin) {                            if (tp_ProgressBar != null)                                tp_ProgressBar.setVisibility(View.VISIBLE);                            getPicture();                        }                        ConstanUtil.isSuccessLogin = true;//登陆成功                        int saturation = DataDepot.saturation == null ? 0 : Integer.valueOf(DataDepot.saturation);                        if (saturation == 0 && autoPhotoProcess.getVisibility() == View.VISIBLE) {                        } else {                            Log.e("mMasterActivity", "setimage1");                            synchronized (synchronos) {                                updata = true;                                mCameraViewStub.setImageBitmap(null);                                mCameraViewStub.setImageBitmap((Bitmap) msg.obj);                            }                            ConstanUtil.isrecycnCameraView = false;                            //  Log.w("mCameraViewStub", "setImageBitmap((Bitmap) msg.obj)");                        }                    }                    break;                case 2:                    focusimageview.setVisibility(View.GONE);                    break;                case 3:                    tp_ProgressBar.setVisibility(View.GONE);                    break;                case UDATAUI_MESSAGE:                    if (loadProgressBar.getVisibility() == View.VISIBLE)                        loadProgressBar.setVisibility(View.GONE);                    mphotoCount.setText(DataDepot.pngsize + DataDepot.moviessize + " ");                    if (secondSettingMultiple != null)                        secondSettingMultiple.setText(DataDepot.contrast + "X");                    rayMenu.getMasterSettingMultiple().setText(DataDepot.contrast + "X");                    break;                case UDATACAPTURE_MESSAGE:                    break;                case UDATAPROCESSBAR_MESSAGE:                    tp_ProgressBar.setVisibility(View.VISIBLE);                    break;                case UDATASTARATION_MESSAGE:                    break;                case UDATATIMER_VIEW_MESSAGE:                    timeView.setVisibility(View.VISIBLE);                    stepTimeTV.setText(DataDepot.recodigtimer);                    break;                case DISMISSTIMER_VIEW_MESSAGE:                    timeView.setVisibility(View.GONE);                    break;                case UDATAAUTOFOCUS_VIEW_MESSAGE:                    aotuFocusTV.setVisibility(View.VISIBLE);                    aotuFocusTV.setText("对焦中，请稍等。。。");                    break;                case DISMISSAUTOFOCUS_VIEW_MESSAGE:                    aotuFocusTV.setVisibility(View.GONE);                    cNuberTV.setVisibility(View.GONE);                    break;                case UDATAAUTOFOCUS_VISSBLE_MESSAGE:                    if (DataDepot.autophotoview.equals("gone") || DataDepot.autophotoview.equals("prepare")) {                        DataDepot.autophotoprocess = 0;                        autoPhotoProcess.setProgress(0);                    }                    mButtonCaptureButton.setVisibility(View.VISIBLE);                    autoPhotoProcess.setVisibility(View.VISIBLE);                    aotuFocusTV.setVisibility(View.VISIBLE);                    aotuFocusTV.setText(DataDepot.autophotostoptimer);                    if(DataDepot.intevalAndPercentage!=null&&DataDepot.autophotoprocess>0)                        cNuberTV.setVisibility(View.VISIBLE);                    cNuberTV.setText("设定值："+DataDepot.autophotocNumber+"   当前值："+getLastConverGence());                    String converGence = getLastConverGence().trim().toString();                    if(!converGence.isEmpty()&&!converGence.contains("null")&&converGence!=null&&getLastConverGence().trim()!=""&&DataDepot.autophotocNumber.trim()!=""){                        Log.e("myinfo","=="+converGence);                        int lastConverGence = Integer.valueOf(converGence);                        int conGence = Integer.valueOf(DataDepot.autophotocNumber.trim());                        if (lastConverGence >= conGence) {                            showNormalDialog("已经到达设定回合率");                        }                    }                    autoPhotoProcess.setMax(DataDepot.autophotocount);                    autoPhotoProcess.setProgress(DataDepot.autophotoprocess);                    break;                case DISMISSAUTOFOCUS_GONE_MESSAGE:                    if (!DataDepot.isAutofocus) {                        aotuFocusTV.setVisibility(View.GONE);                    }                    mButtonCaptureButton.setVisibility(View.GONE);                    autoPhotoProcess.setProgress(0);                    autoPhotoProcess.setVisibility(View.GONE);                    break;                case UDATAAUTOFOCUS_PER_MESSAGE:                    mButtonCaptureButton.setVisibility(View.GONE);                    break;                case UDATAREMENUCOLOR_MESSAGE:                    setRayMenuColor(msg.arg1);                    break;                case UDATA_MULTIPLE_MESSAGE:                    if (msg.obj != null)                        mScaleplateValueTextView.setText(msg.obj.toString());                    break;                case UDATA_RECORD_MESSAGE:                    mRecordView.setVisibility(View.VISIBLE);                    break;                case DISMISS_RECORD_MESSAGE:                    mRecordView.setVisibility(View.GONE);                    stopTime();                    break;                case DISMISS_STUBITMAP_MESSAGE:                    mCameraViewStub.setImageBitmap(null);                    ConstanUtil.isrecycnCameraView = true;                    Log.w("mCameraViewStub", "setImageBitmap(null)");                    break;                case SHOW_AUTOPHOTO_DIALOG_MESSAGE:                    if (delayAutoPhoto != null) {                        if (delayAutoPhoto.isShowing()) {                        } else {                            showDelayAutoPhoto("正在完成自动拍照");                        }                    } else {                        showDelayAutoPhoto("正在完成自动拍照");                    }                    break;                case SHOW_EXPORT_DIALOG_MESSAGE:                    if (delayAutoPhoto != null) {                        if (delayAutoPhoto.isShowing()) {                        } else {                            showDelayAutoPhoto("正在完成导出");                        }                    } else if (delayAutoPhoto == null) {                        showDelayAutoPhoto("正在完成导出");                    }                    break;                case DISMISS_DELAY_DIALOG_MESSAGE:                    if (delayAutoPhoto != null) {                        if (delayAutoPhoto.isShowing()) {                            delayAutoPhoto.dismiss();                            delayAutoPhoto = null;                        }                    }                    break;                case UPADAT_GROUTH_RATE:                    if (grothRateDialog != null) {                        if (grothRateDialog.isShowing()) {                            showGrothRate();//这轮自动拍照完成后更新细胞融合率                        }                    }                    break;                case VIEW_MESSAGEI_UPADA:                    switch (msg.arg1){                        case 1:                            if (tp_ProgressBar.getVisibility() == View.VISIBLE) {                                tp_ProgressBar.setVisibility(View.GONE);                            }                            break;                        case 2:                            if (ConstanUtil.isrecycnCameraView == false && autoPhotoProcess.getVisibility() == View.VISIBLE) {                                myImgHandler.sendEmptyMessage(DISMISS_STUBITMAP_MESSAGE);                            }                            break;                        case 3:                            if (delayAutoPhoto != null) {                                myImgHandler.sendEmptyMessage(DISMISS_DELAY_DIALOG_MESSAGE);}                            break;                        case 4:                            loadProgressBar.setVisibility(View.VISIBLE);                            break;                        case 5:                            requesSuccessful = true;                            if (ISShowRockert) {                                ISShowRockert = false;                                initSettingButtons();}                            break;                        case 6:                            //摄像头关闭 清楚btm                            if (ConstanUtil.isrecycnCameraView == false && autoPhotoProcess.getVisibility() == View.VISIBLE) {                                myImgHandler.sendEmptyMessage(DISMISS_STUBITMAP_MESSAGE);                            }                            break;                        case 7:                            loadProgressBar.setVisibility(View.GONE);                            break;                        case 8:                            if (delayAutoPhoto != null) {                                myImgHandler.sendEmptyMessage(DISMISS_DELAY_DIALOG_MESSAGE);                            }                            break;                    }                    break;                case VIEW_MESSAGEII_UPADA:                    switch (msg.arg1){                        case 0:                            final byte[] finalData = (byte[]) msg.obj;                            int saturation = Integer.valueOf(DataDepot.saturation);                            if (saturation == 0) {                                mCameraViewStub.setImageDrawable(getResources().getDrawable(R.drawable.icon_bg_btn_light_black));                                mCameraViewStub.setBackgroundColor(getResources().getColor(R.color.BLACK));                            } else {                                synchronized (synchronos) {                                    Bitmap bitmap = BitmapFactory.decodeByteArray(finalData, 0, finalData.length);                                    Message message = new Message();                                    message.obj = bitmap;                                    message.what = UPADAT_IMAGE_MESSAGE;                                    myImgHandler.sendMessage(message);                                }                            }                            break;                    }                    break;                case UPADAT_IAMGE_ALBUM:                    String medianame = (String) msg.obj;                    if(!medianame.isEmpty())                    FrescoTool.displayImage(Constant.HTTP_PROTOCOL + Constant.HTTP_URI + Constant.CAMERA_GETPHOTO + "?picname=" + medianame, btn_photo_album);                    break;                case UPADAT_MESSAGE_LISTENING:                    if (isListnessConnect) {                        isListnessConnect =false;                        UIUtil.toast(MasterActivity.this, "链接异常，请重新登录");                        Intent intent = new Intent(MasterActivity.this, SelectConnectActivity.class);                        startActivity(intent);                        finish();                    }else {                        if(bindService!=null)                            bindService.init();                        isListnessConnect = true;                    }                    break;            }        }    }    private AlertDialog.Builder normalDialog;    private  AlertDialog dialog;    private void showNormalDialog(String string) {        if(dialog!=null&&dialog.isShowing()) {            dialog.dismiss();            dialog  = null;            normalDialog  = null;        }        normalDialog = new AlertDialog.Builder(MasterActivity.this);        normalDialog.setIcon(R.mipmap.ic_microscope_launcher);        normalDialog.setTitle("          提示！   ");        normalDialog.setMessage(string);        normalDialog.setPositiveButton("确定",                new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                    }                });        //显示        dialog = normalDialog.show();    }    private String getLastConverGence(){        String intevalAndPercentage = DataDepot.intevalAndPercentage;        String spustr = (String) SPUtils.get(this, "percentage", null);        if (intevalAndPercentage == null||intevalAndPercentage=="null") {            if (spustr == null) {                return "0";            } else {                intevalAndPercentage = spustr;            }        }        String[] strings = intevalAndPercentage.split("&");        if (strings == null) {            return "0";        }else{            return ""+strings[strings.length-1];        }    }    private Timer requestTimer;    private TimerTask requestTask;    private void requesTimer(final String user) {        if (requestTimer != null) {            requestTimer.cancel();            requestTimer = null;        }        requestTask = new TimerTask() {            @Override            public void run() {                AVQuery<AVObject> query = new AVQuery<>("ConnectState");                query.whereEqualTo("user", user);                query.getFirstInBackground(new GetCallback<AVObject>() {                    @Override                    public void done(AVObject object, AVException e) {                        object.put("heartbeat", true);                        AVSaveOption option = new AVSaveOption();                        option.query(new AVQuery<>("ConnectState").whereEqualTo("user", user));                        option.setFetchWhenSave(true);                        object.saveInBackground(option, new SaveCallback() {                            @Override                            public void done(AVException e) {                                if (e == null) {                                } else {                                }                            }                        });                    }                });            }        };        requestTimer = new Timer();        requestTimer.schedule(requestTask, 10000, 60 * 1000);//10秒后启动 每60秒查询一次    }    private TimerTask timerTask = new TimerTask() {        @Override        public void run() {            if (ConstanUtil.isSuccessLogin) {                if (!HttpUtil.isWifionnected(activity)) {                    UIUtil.toast(activity, "wifi网络不可用");                }            }        }    };    @Override    protected void onCreate(Bundle savedInstanceState) {        activity = this;        super.onCreate(savedInstanceState);        this.getWindow().setFlags(FLAG_HOMEKEY_DISPATCHED, FLAG_HOMEKEY_DISPATCHED);//关键代码,是屏蔽home键        this.powerManager = (PowerManager) this.getSystemService(Context.POWER_SERVICE);        this.wakeLock = this.powerManager.newWakeLock(PowerManager.FULL_WAKE_LOCK, "My Lock");        if (ConstanUtil.remoteLogin) {            userName = getIntent().getStringExtra("username");        }        initView();//初始化控件        initListener();        bindservice();        registBroadcast();    }    private MediaCodecSurfaceView mSurfaceView1;    private int mVideoWidth  = 0;    private int mVideoHeight = 0;    private void initSurface(){        mSurfaceView1 = (MediaCodecSurfaceView) findViewById(R.id.surfaceView1);        mSurfaceView1.setOnSupportListener(new OnSupportListener() {            @Override            public void UnSupport() {                Log.i(TAG, "this device not support this resolution!");            }        });        mSurfaceView1.setOnDecodeListener(new OnDecodeListener() {            @Override            public void decodeResult(int w, int h) {                if (mVideoWidth != w || mVideoHeight != h) {                    runOnUiThread(new Runnable() {                        @Override                        public void run() {                           // tv_text.setText(mVideoWidth + " x " + mVideoHeight);                        }                    });                }            }        });    }    private boolean requesSuccessful = false;    private MyBrodcastReceive receive;    private boolean isRegistBroadcast = false;    private void registBroadcast(){        isRegistBroadcast = true;        receive = new MyBrodcastReceive();        IntentFilter intentFilter = new IntentFilter();        intentFilter.addAction(ACTION_CLOSE_SYSTEM_DIALOGS);        registerReceiver(receive,intentFilter);    }    private class MyBrodcastReceive extends BroadcastReceiver{        @Override        public void onReceive(Context context, Intent intent) {            String action = intent.getAction();            //按下Home键会发送ACTION_CLOSE_SYSTEM_DIALOGS的广播            if (action.equals(ACTION_CLOSE_SYSTEM_DIALOGS)) {                GActivityManager.getActivityManager().appExit(MasterActivity.this);                //Toast.makeText(MasterActivity.this, "HOME", Toast.LENGTH_SHORT).show();            }        }    }    //更新自动拍照设置后数据    @Override    protected void onStart() {        super.onRestart();    }    @Override    public void onResume() {        super.onResume();        if (ConstanUtil.remoteLogin) {            Log.w(TAG, "userName=" + userName);        } else {            if(bindService!=null)             bindService.init();            /*if (!ConstanUtil.isSuccessLogin) {                this.wakeLock.acquire();                cameraInfoWebSocket();                picAsyncWetSocket();                requesObjectLight();//请求配置参数                mQueue = Volley.newRequestQueue(activity);            }*/        }    }    @Override    public void onPause() {        Log.e("MasterActivvty", "onPause");       /* if (mQueue != null) {            mQueue.stop();            mQueue.getCache().clear();            mQueue.cancelAll("btn_photo_album");            //   mQueue = null;        }*/        super.onPause();    }    private void initView() {        setContentView(R.layout.activity_master);        //摄像头显示视图        // mCameraViewStub = (ImageView) findViewById(R.id.camera_view_stub);        mCameraViewStub = (ImageView) findViewById(R.id.camera_view_stub);        //左下角视频计数控件        timeView = findViewById(R.id.time_layout);        stepTimeTV = (TextView) findViewById(R.id.time_text);        aotuFocusTV = (TextView) findViewById(R.id.auto_focus_tv);         cNuberTV= (TextView) findViewById(R.id.convergence_tv);        //右侧拍照,拍摄控制栏        mRecordView = (ImageView) findViewById(R.id.record_button);        mRecordButton = findViewById(R.id.record_layout);        mStillCaptureButton = findViewById(R.id.still_layout);        mButtonCaptureButton = (ImageView) findViewById(R.id.auto_button);        autoPhotoProcess = ((CircularSeekBar) findViewById(R.id.autophotoseebar));        loadProgressBar = ((ProgressBar) findViewById(R.id.loadding_pb));        //右下角相册缩略图autophotoseebar        btn_photo_album = (SimpleDraweeView) findViewById(R.id.btn_photo_album);        tp_ProgressBar = (ProgressBar) findViewById(R.id.t_pProgerssBar);        t_priveiw = ((TextView) findViewById(R.id.t_view));        if (ConstanUtil.remoteLogin)            t_priveiw.setVisibility(View.VISIBLE);        //亮度,ISO渐隐框        mISOBrightnessLayout = findViewById(R.id.operation_ios_brightness);        mOperationBg = (ImageView) findViewById(R.id.operation_bg);        mOperationPercent = (TextView) findViewById(R.id.text_content);        //焦点图        mLinearLayout = (FrameLayout) findViewById(R.id.focus_layout);        focusimageview = ((MoveImageview) findViewById(R.id.focus_imageview));        focusimageview.setBackgroundResource(R.drawable.explosion);        mFocusBackground = (AnimationDrawable) focusimageview.getBackground();        //2016.08.03 : 新增 : 标尺的单位数值 :        mScaleplateValueTextView = (TextView) findViewById(R.id.tv_scaleplateValue);        mScaleplateValueTextView.setOnClickListener(this);        //左上设置栏        brightnessSetup = (RelativeLayout) findViewById(R.id.brightness_setup_btn);        focusSetup = (RelativeLayout) findViewById(R.id.focus_setup_btn);        isoSetup = (RelativeLayout) findViewById(R.id.iso_display_setup);        brightnessDownMax = (ImageView) findViewById(R.id.brightness_button_down_max);        brightnessDownMid = (ImageView) findViewById(R.id.brightness_button_down_mid);        brightnessDownMin = (ImageView) findViewById(R.id.brightness_button_down_min);        brightnessUpMax = (ImageView) findViewById(R.id.brightness_button_up_max);        brightnessUpMid = (ImageView) findViewById(R.id.brightness_button_up_mid);        brightnessUpMin = (ImageView) findViewById(R.id.brightness_button_up_min);        focusDownMax = (ImageView) findViewById(R.id.focus_button_domn_max);        focusDownMid = (ImageView) findViewById(R.id.focus_button_domn_mid);        focusDownMin = (ImageView) findViewById(R.id.focus_button_domn_min);        focusUpMax = (ImageView) findViewById(R.id.focus_button_up_max);        focusUpMid = (ImageView) findViewById(R.id.focus_button_up_mid);        focusUpMin = (ImageView) findViewById(R.id.focus_button_up_min);        isoDown = (ImageView) findViewById(R.id.iso_down);        isoUp = (ImageView) findViewById(R.id.iso_up);        mphotoCount = ((TextView) findViewById(R.id.text_photo_count));        mRockerView = ((RockerView) findViewById(R.id.rockerview));    }    private String currentsDirection;    private String getDirection(RockerView.Direction direction) {        String message = null;        switch (direction) {            case DIRECTION_LEFT:                message = "左";                break;            case DIRECTION_RIGHT:                message = "右";                break;            case DIRECTION_UP:                message = "上";                break;            case DIRECTION_DOWN:                message = "下";                break;            case DIRECTION_UP_LEFT:                message = "左上";                break;            case DIRECTION_UP_RIGHT:                message = "右上";                break;            case DIRECTION_DOWN_LEFT:                message = "左下";                break;            case DIRECTION_DOWN_RIGHT:                message = "右下";                break;            default:                break;        }        return message;    }    private void rockerDirection(String direction, float x, float y) {        if (direction == null)            return;        if (direction.equals("上")) {            sendBluetoothUartMessage(false, true, (int) y);        } else if (direction.equals("下")) {            sendBluetoothUartMessage(false, false, (int) y);        } else if (direction.equals("左")) {            sendBluetoothUartMessage(true, false, (int) x);        } else if (direction.equals("右")) {            sendBluetoothUartMessage(true, true, (int) x);        }    }    private void sendBluetoothUartMessage(boolean top_or_dottom, boolean left_or_right, int step) {        String sendstr = "4A504C59";        String speed = "";        String mstep = "64";        step = Math.abs(step);        if (step > 40) {            speed = "09";        } else if (step > 20) {            speed = "05";        } else {            speed = "01";            //mstep = "02";        }        //如果是左右 电机5        if (top_or_dottom) {            //如果向右 正转            if (left_or_right) {                sendstr = sendstr + "03" + "aa" + "00" + mstep + "55" + speed + "0000";            } else {                sendstr = sendstr + "03" + "55" + "00" + mstep + "55" + speed + "0000";            }        } else {            //如果向上  反转            if (left_or_right) {                sendstr = sendstr + "04" + "aa" + "00" + mstep + "55" + speed + "0000";            } else {                sendstr = sendstr + "04" + "55" + "00" + mstep + "55" + speed + "0000";            }        }        if(bindService!=null)        bindService.sendMessageToRockerView(sendstr);    }    private void initRockerListener() {        if (ConstanUtil.ROCKER) {            mRockerView.setVisibility(View.VISIBLE);            mRockerView.setCallBackMode(RockerView.CallBackMode.CALL_BACK_MODE_MOVE);            mRockerView.setOnShakeListener(RockerView.DirectionMode.DIRECTION_4_ROTATE_45, new RockerView.OnShakeListener() {                @Override                public void onStart() {                }                @Override                public void direction(RockerView.Direction direction) {                    currentsDirection = getDirection(direction);                }                @Override                public void onFinish() {                }            });            mRockerView.setOnAngleChangeListener(new RockerView.OnAngleChangeListener() {                @Override                public void onStart() {                }                @Override                public void angle(double angle, float lenXY, float lenX, float lenY) {                    rockerDirection(currentsDirection, lenX, lenY);                }                @Override                public void onFinish() {                    String closeAllstr = "4A504C59" + "15" + "00000000000000";                    if(bindService!=null)                    bindService.sendMessageToRockerView(closeAllstr);                }            });        } else            mRockerView.setVisibility(View.GONE);    }    private void moveLocation(View view, float x, float y) {        FrameLayout.LayoutParams params = (FrameLayout.LayoutParams) view.getLayoutParams();        params.leftMargin = (int) x;        params.topMargin = (int) y;        view.setLayoutParams(params);    }    private void initListener() {        mGestureDetector = new GestureDetector(this, new MyGestureListener());        mRecordButton.setOnClickListener(this);        mStillCaptureButton.setOnClickListener(this);        btn_photo_album.setOnClickListener(this);        //亮度按键        brightnessDownMax.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                if (event.getAction() == MotionEvent.ACTION_DOWN) {                    startLongClickTimer(2, false, 3);                } else if (event.getAction() == MotionEvent.ACTION_UP) {                    stopLongChickTimer(2);                }                return false;            }        });        brightnessDownMid.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                if (event.getAction() == MotionEvent.ACTION_DOWN) {                    startLongClickTimer(2, false, 2);                } else if (event.getAction() == MotionEvent.ACTION_UP) {                    stopLongChickTimer(2);                }                return false;            }        });        brightnessDownMin.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                if (event.getAction() == MotionEvent.ACTION_DOWN) {                    startLongClickTimer(2, false, 1);                } else if (event.getAction() == MotionEvent.ACTION_UP) {                    stopLongChickTimer(2);                }                return false;            }        });        brightnessUpMax.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                if (event.getAction() == MotionEvent.ACTION_DOWN) {                    startLongClickTimer(2, true, 3);                } else if (event.getAction() == MotionEvent.ACTION_UP) {                    stopLongChickTimer(2);                }                return false;            }        });        brightnessUpMid.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                if (event.getAction() == MotionEvent.ACTION_DOWN) {                    startLongClickTimer(2, true, 2);                } else if (event.getAction() == MotionEvent.ACTION_UP) {                    stopLongChickTimer(2);                }                return false;            }        });        brightnessUpMin.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                if (event.getAction() == MotionEvent.ACTION_DOWN) {                    startLongClickTimer(2, true, 1);                } else if (event.getAction() == MotionEvent.ACTION_UP) {                    stopLongChickTimer(2);                }                return false;            }        });        //对焦按键        focusDownMax.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                if (event.getAction() == MotionEvent.ACTION_DOWN) {                    startLongClickTimer(3, false, 3);                } else if (event.getAction() == MotionEvent.ACTION_UP) {                    stopLongChickTimer(3);                }                return false;            }        });        focusDownMid.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                if (event.getAction() == MotionEvent.ACTION_DOWN) {                    startLongClickTimer(3, false, 2);                } else if (event.getAction() == MotionEvent.ACTION_UP) {                    stopLongChickTimer(3);                }                return false;            }        });        focusDownMin.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                if (event.getAction() == MotionEvent.ACTION_DOWN) {                    startLongClickTimer(3, false, 1);                } else if (event.getAction() == MotionEvent.ACTION_UP) {                    stopLongChickTimer(3);                }                return false;            }        });        focusUpMax.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                if (event.getAction() == MotionEvent.ACTION_DOWN) {                    startLongClickTimer(3, true, 3);                } else if (event.getAction() == MotionEvent.ACTION_UP) {                    stopLongChickTimer(3);                }                return false;            }        });        focusUpMid.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                if (event.getAction() == MotionEvent.ACTION_DOWN) {                    startLongClickTimer(3, true, 2);                } else if (event.getAction() == MotionEvent.ACTION_UP) {                    stopLongChickTimer(3);                }                return false;            }        });        focusUpMin.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                if (event.getAction() == MotionEvent.ACTION_DOWN) {                    startLongClickTimer(3, true, 1);                } else if (event.getAction() == MotionEvent.ACTION_UP) {                    stopLongChickTimer(3);                }                return false;            }        });        //iso按键        isoDown.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                if (event.getAction() == MotionEvent.ACTION_DOWN) {                    startLongClickTimer(1, false, 1);                } else if (event.getAction() == MotionEvent.ACTION_UP) {                    stopLongChickTimer(1);                }                return false;            }        });        isoUp.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                if (event.getAction() == MotionEvent.ACTION_DOWN) {                    startLongClickTimer(1, true, 1);                } else if (event.getAction() == MotionEvent.ACTION_UP) {                    stopLongChickTimer(1);                }                return false;            }        });    }    private Timer longCheckTimer;    // private int saveSendAfterGamma;//记录发送之后的Gamma值    private void startLongClickTimer(final int type, final boolean upordomn, final int value) {        if (DataDepot.autophoto_view == 3) {            UIUtil.toast(activity, "请停止自动拍照后再操作");            return;        }        //判断是ISO(1) 或者是Brightness(2) 或者 Focus(3)        if (type == 3) {            if (DataDepot.isAutofocus) {                UIUtil.toast(activity, "请停止自动对焦再手动调焦。");                return;            }        }        switch (type) {            case 1:                mDismissHandler.removeMessages(MasterActivity.HANDLE_MESSAGE_DISMISS_ISO);                if (isoSetup.getVisibility() != View.VISIBLE) {                    isoSetup.setVisibility(View.VISIBLE);                }                mDismissHandler.removeMessages(MasterActivity.HANDLE_MESSAGE_DISMISS_LAYOUT);                if (mISOBrightnessLayout.getVisibility() != View.VISIBLE) {                    mISOBrightnessLayout.setVisibility(View.VISIBLE);                }                break;            case 2:                mDismissHandler.removeMessages(MasterActivity.HANDLE_MESSAGE_DISMISS_BRIGHTNESS);                if (brightnessSetup.getVisibility() != View.VISIBLE) {                    brightnessSetup.setVisibility(View.VISIBLE);                }                mDismissHandler.removeMessages(MasterActivity.HANDLE_MESSAGE_DISMISS_LAYOUT);                if (mISOBrightnessLayout.getVisibility() != View.VISIBLE) {                    mISOBrightnessLayout.setVisibility(View.VISIBLE);                }                break;            case 3:                mDismissHandler.removeMessages(MasterActivity.HANDLE_MESSAGE_DISMISS_FOCUS);                if (focusSetup.getVisibility() != View.VISIBLE) {                    focusSetup.setVisibility(View.VISIBLE);                }                mDismissHandler.removeMessages(MasterActivity.HANDLE_MESSAGE_DISMISS_LAYOUT);                if (mISOBrightnessLayout.getVisibility() != View.VISIBLE) {                    mISOBrightnessLayout.setVisibility(View.VISIBLE);                }                break;        }        int delayTimer = 0;        switch (value) {            case 1:                delayTimer = 250;                break;            case 2:                delayTimer = 500;                break;            case 3:                delayTimer = 1000;                break;        }        if (longCheckTimer == null) {            longCheckTimer = new Timer();            longCheckTimer.scheduleAtFixedRate(new TimerTask() {                @Override                public void run() {                    runOnUiThread(new Runnable() {                        @Override                        public void run() {                        }                    });                    if (upordomn) {//增加                        onSlideUp(type, value);                    } else {//减少                        onSlideDomn(type, value);                    }                }            }, 0, delayTimer);        }    }    private void onSlideDomn(int type, int value) {        switch (type) {            case 1:                if (DataDepot.gain != null) {                    mISO = Integer.valueOf(DataDepot.gain);                    Log.e("MasterActivity1", "mISO=" + mISO + " lastISO=" + lastISO);                    if (mISO == lastISO) {                        //if (mISO != 100)                        //   return;                    }                    if (mISO < 0)                        mISO = 0;                }                lastISO = mISO;                if (mISO == 100) {                    mISO = mISO - 20;                } else {                    mISO = mISO - 16;                }                if (mISO < 0) {                    mISO = 0;                }                if (ConstanUtil.remoteLogin) {                    ResponeUtils.sendParamInstruction(ResponeUtils.PARAM_TYPE_ISO_TYPE, mISO, userName);                } else                    // 变更进度条                    if(bindService!=null)                    bindService.sendCameraParam(PARAM_TYPE_ISO, mISO);                runOnUiThread(new Runnable() {                    @Override                    public void run() {                        String label = "";                        int iso = Integer.valueOf(DataDepot.gain);                        switch (mISO) {                            case 0:                                label = "100";                                break;                            case 16:                                label = "200";                                break;                            case 32:                                label = "400";                                break;                            case 48:                                label = "800";                                break;                            case 64:                                label = "1600";                                break;                            case 80:                                label = "3200";                                break;                            case 100:                                label = "6400";                                break;                        }                        mOperationPercent.setText(label);                    }                });                break;            case 2:                int mBrightness = 0;                mBrightness = Integer.valueOf(DataDepot.brightness);                if (mBrightness == lastBrightness) {                    int integer = DataDepot.maxbrightness;                    if (mBrightness != integer) {                        // return;                    }                }                lastBrightness = mBrightness;                if (mBrightness < 0)                    mBrightness = 0;                switch (value) {                    case 1://一档                        mBrightness -= 1;                        break;                    case 2://二挡                        mBrightness -= 50;                        break;                    case 3://三档                        mBrightness -= 1000;                        break;                }                int maxbrightness = DataDepot.maxbrightness;                if (mBrightness < 0) {                    mBrightness = 0;                }                brightnessData = mBrightness;                if (ConstanUtil.remoteLogin) {                    ResponeUtils.sendParamInstruction(ResponeUtils.PARAM_TYPE_BRIGHTNESS_TYPE, brightnessData, userName);                } else {                    if(bindService!=null)                    bindService.sendCameraParam(PARAM_TYPE_BRIGHTNESS, brightnessData);                }                // 变更进度条                runOnUiThread(new Runnable() {                    @Override                    public void run() {                        mOperationPercent.setText(brightnessData + "");                    }                });                break;            case 3:                int mGamma = 0;                int sendNumber = 0;                mGamma = Integer.valueOf(DataDepot.gamma);                //   Log.e("MasterActivity1", "lastgamma=" + lastGamma + " mGamma=" + mGamma);                if (mGamma == lastGamma) {                    if (mGamma != 8500) {                        // return;                    }                }                lastGamma = mGamma;                //如果数据没更新则返回               /* if (saveSendAfterGamma != mGamma && saveSendAfterGamma != 0)                    return;*/                if (mGamma < 0)                    mGamma = 0;                switch (value) {                    case 1://一档                        mGamma -= 2;                        sendNumber = 2;                        break;                    case 2://二挡                        mGamma -= 64;                        sendNumber = 64;                        break;                    case 3://三档                        mGamma -= 1024;                        sendNumber = 1024;                        break;                }                if (mGamma < 0) {                    mGamma = 0;                }                final int gamma = mGamma;                if (ConstanUtil.remoteLogin) {                    ResponeUtils.sendParamInstruction(ResponeUtils.PARAM_TYPE_GAMMA_DOMN_TYPE, sendNumber, userName);                } else {                    if(bindService!=null)                    bindService.sendCameraParam(PARAM_TYPE_GAMMA_DOMN, sendNumber);                }                // saveSendAfterGamma = gamma;                // 变更进度条                runOnUiThread(new Runnable() {                    @Override                    public void run() {                        mOperationPercent.setText(gamma + "");                    }                });                break;        }    }    private void onSlideUp(int type, int value) {        switch (type) {            case 1:                String label = "";                if (DataDepot.gain != null) {                    mISO = Integer.valueOf(DataDepot.gain);                    if (mISO == lastISO) {                        //if (mISO != 0)                        //    return;                    }                    if (mISO < 0)                        mISO = 0;                }                lastISO = mISO;                if (mISO == 80) {                    mISO = mISO + 20;                } else {                    mISO = mISO + 16;                }                if (mISO > DataDepot.maxiso) {                    mISO = DataDepot.maxiso;                }                if (ConstanUtil.remoteLogin) {                    ResponeUtils.sendParamInstruction(ResponeUtils.PARAM_TYPE_ISO_TYPE, mISO, userName);                } else {                    // 变更进度条                    if(bindService!=null)                    bindService.sendCameraParam(PARAM_TYPE_ISO, mISO);                }                runOnUiThread(new Runnable() {                    @Override                    public void run() {                        String label = "";                        int iso = Integer.valueOf(DataDepot.gain);                        switch (mISO) {                            case 0:                                label = "100";                                break;                            case 16:                                label = "200";                                break;                            case 32:                                label = "400";                                break;                            case 48:                                label = "800";                                break;                            case 64:                                label = "1600";                                break;                            case 80:                                label = "3200";                                break;                            case 100:                                label = "6400";                                break;                        }                        mOperationPercent.setText(label);                    }                });                break;            case 2:                int mBrightness = 0;                mBrightness = Integer.valueOf(DataDepot.brightness);                if (mBrightness == lastBrightness) {                    // if (mBrightness != 0)                    //     return;                }                lastBrightness = mBrightness;                if (mBrightness < 0)                    mBrightness = 0;                switch (value) {                    case 1://一档                        mBrightness += 1;                        break;                    case 2://二挡                        mBrightness += 50;                        break;                    case 3://三档                        mBrightness += 1000;                        break;                }                int maxbrightness = DataDepot.maxbrightness;                Log.i(TAG, "maxbrightness=" + maxbrightness);                if (mBrightness > maxbrightness) {                    mBrightness = maxbrightness;                }                Log.i(TAG, "mBrightness=" + mBrightness);                brightnessData = mBrightness;                if (ConstanUtil.remoteLogin) {                    ResponeUtils.sendParamInstruction(ResponeUtils.PARAM_TYPE_BRIGHTNESS_TYPE, brightnessData, userName);                } else {                    if(bindService!=null)                    bindService.sendCameraParam(PARAM_TYPE_BRIGHTNESS, brightnessData);                }                // 变更进度条                runOnUiThread(new Runnable() {                    @Override                    public void run() {                        mOperationPercent.setText(brightnessData + "");                    }                });                break;            case 3:                int mGamma = 0;                int sendNumber = 0;                mGamma = Integer.valueOf(DataDepot.gamma);                // Log.e("MasterActivity1", "lastgamma=" + lastGamma + " mGamma=" + mGamma);                if (mGamma == lastGamma) {                    if (mGamma != 0) {                        // return;                    }                }                lastGamma = mGamma;              /*  //如果数据没更新则返回                if (saveSendAfterGamma != mGamma && saveSendAfterGamma != 0)                    return;*/                if (mGamma < 0)                    mGamma = 0;                switch (value) {                    case 1://一档                        mGamma += 2;                        sendNumber = 2;                        break;                    case 2://二挡                        mGamma += 64;                        sendNumber = 64;                        break;                    case 3://三档                        mGamma += 1024;                        sendNumber = 1024;                        break;                }                if (mGamma > 8500) {                    mGamma = 8500;                }                final int gamma = mGamma;                if (ConstanUtil.remoteLogin) {                    ResponeUtils.sendParamInstruction(ResponeUtils.PARAM_TYPE_GAMMA_TYPE, sendNumber, userName);                } else {                    if(bindService!=null)                    bindService.sendCameraParam(PARAM_TYPE_GAMMA, sendNumber);                }                // saveSendAfterGamma = gamma;                // 变更进度条                runOnUiThread(new Runnable() {                    @Override                    public void run() {                        if (!DataDepot.gamma.equals(""))                            mOperationPercent.setText(gamma + "");                    }                });                break;        }    }    private void stopLongChickTimer(int type) {        switch (type) {            case 1:                mDismissHandler.sendEmptyMessageDelayed(MasterActivity.HANDLE_MESSAGE_DISMISS_ISO, 1500);                break;            case 2:                mDismissHandler.sendEmptyMessageDelayed(MasterActivity.HANDLE_MESSAGE_DISMISS_BRIGHTNESS, 1500);                break;            case 3:                mDismissHandler.sendEmptyMessageDelayed(MasterActivity.HANDLE_MESSAGE_DISMISS_FOCUS, 1500);                break;        }        mDismissHandler.sendEmptyMessageDelayed(MasterActivity.HANDLE_MESSAGE_DISMISS_LAYOUT, 1500);        if (longCheckTimer != null) {            longCheckTimer.cancel();            longCheckTimer = null;        }    }    // 子按钮标记倍数    private TextView secondSettingMultiple;    // 子按钮标记颜色    private ImageView secondSettingColor;    // 主按钮    private RayMenu rayMenu;    // 有摇杆    private static final int[] SETTING_ITEM_DRAWABLES = {R.mipmap.light, R.mipmap.enlarge, R.mipmap.autofocus, R.mipmap.contrast, R.mipmap.export, R.mipmap.convergence_rate, R.mipmap.more};    //无摇杆    private static final int[] SETTING_ITEM_DRAWABLES_ON_ROCKET = {R.mipmap.light, R.mipmap.enlarge, R.mipmap.autofocus, R.mipmap.export, R.mipmap.convergence_rate, R.mipmap.more};    //无物镜切换    private static final int[] SETTING_ITEM_DRAWABLES_LONZA = {R.mipmap.light, R.mipmap.autofocus, R.mipmap.export, R.mipmap.convergence_rate, R.mipmap.more};    /*    //左上设置栏按钮     */    private boolean ISShowRockert = true;    private void initSettingButtons() {        if (rayMenu == null)            rayMenu = (RayMenu) findViewById(R.id.ray_menu);        rayMenu.setHideAfterClick(false);//设置主按钮隐藏点击为false        int itemCount = 0;//里面有四个图        int count = 0;        if (ConstanUtil.LONZA) {            itemCount = SETTING_ITEM_DRAWABLES_LONZA.length;            count = 2;        } else {            if (ConstanUtil.ROCKER) {                itemCount = SETTING_ITEM_DRAWABLES.length;            } else {                itemCount = SETTING_ITEM_DRAWABLES_ON_ROCKET.length;                count = 1;            }        }        for (int i = 0; i < itemCount; i++) {            final View view = getLayoutInflater().inflate(R.layout.item_setting_button, null);            if (ConstanUtil.LONZA) {                view.findViewById(R.id.image_view).setBackgroundResource(SETTING_ITEM_DRAWABLES_LONZA[i]);            } else {                if (ConstanUtil.ROCKER) {                    view.findViewById(R.id.image_view).setBackgroundResource(SETTING_ITEM_DRAWABLES[i]);                } else {                    view.findViewById(R.id.image_view).setBackgroundResource(SETTING_ITEM_DRAWABLES_ON_ROCKET[i]);                }            }            View extraView = view.findViewById(R.id.extra_layout);            if (i == 2 || i == 3 || i == 4 || i == 5 || i == 6) {                extraView.setVisibility(View.GONE);                if (i == (6 - count)) {                    rayMenu.addItem(view, new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            if (DataDepot.is_record) {                                UIUtil.toast(activity, "需停止录像才能进行此项操作");                                return;                            }                            if (tp_ProgressBar != null) {                                if (tp_ProgressBar.getVisibility() == View.VISIBLE) {                                    UIUtil.toast(activity, "请等待加载完成再操作");                                    return;                                }                            }                            isListnessConnect = false;                            Intent intent = new Intent(MasterActivity.this, SettingActivity.class);                            if (ConstanUtil.remoteLogin) {                                intent.putExtra("username", userName);                                startActivity(intent);//                               // finish();                            } else {                                startActivity(intent);                            }                        }                    });// Add a menu item                } else if (i == (5 - count)) {                    rayMenu.addItem(view, new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            showGrothRate();                        }                    });                } else if (i == (4 - count)) {                    rayMenu.addItem(view, new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            if (DataDepot.autophoto_view == 3) {                                UIUtil.toast(activity, "需停止自动拍照才能进行此项操作");                                return;                            }                            if (ConstanUtil.isFastDoubleClick(3000)) {                                UIUtil.toast(MasterActivity.this, "该操作过于频繁，请稍后");                                return;                            }                            if ((DataDepot.moviessize + DataDepot.pngsize) < 1) {                                UIUtil.toast(MasterActivity.this, "暂无可导出资源");                                return;                            }                            if (DataDepot.isexport) {                                UIUtil.toast(MasterActivity.this, "正在导出，请稍后");                                return;                            }                            exportDiolog();                        }                    });                } else if (i == (3 - count)) {                    rayMenu.addItem(view, new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            showAutoPhotoSateXY(v);                        }                    });                } else {                    rayMenu.addItem(view, new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            if (DataDepot.autophoto_view == 3) {                                UIUtil.toast(activity, "需停止自动拍照才能进行此项操作");                                return;                            }                            showAutoFocusPopupWindow(v);                        }                    });                }            } else {                extraView.setVisibility(View.VISIBLE);                //索引为0 的是 物镜倍数选择 : 10x / 20x :                if (i == 1) {                    if (ConstanUtil.LONZA) {                        extraView.setVisibility(View.GONE);                        rayMenu.addItem(view, new View.OnClickListener() {                            @Override                            public void onClick(View v) {                                if (DataDepot.autophoto_view == 3) {                                    UIUtil.toast(activity, "需停止自动拍照才能进行此项操作");                                    return;                                }                                showAutoFocusPopupWindow(v);                            }                        });                    } else {                        secondSettingMultiple = (TextView) view.findViewById(R.id.text_multiple);                        secondSettingMultiple.setVisibility(View.VISIBLE);                        // 倍数监听                        rayMenu.addItem(view, new View.OnClickListener() {                            @Override                            public void onClick(View v) {                                if (DataDepot.autophoto_view == 3) {                                    UIUtil.toast(activity, "需停止自动拍照才能进行此项操作");                                    return;                                }                                if (DataDepot.uartisbusy) {                                    UIUtil.toast(activity, "机器正忙,请稍等。。。");                                    return;                                }                                //两个物镜                                if (ConstanUtil.OBJECTIVES.length == 2) {                                    int sendObjective = 0;                                    int multiple = Integer.valueOf(DataDepot.contrast);                                    if (multiple == ConstanUtil.OBJECTIVES[0]) {                                        sendObjective = ConstanUtil.OBJECTIVES[1];                                    } else {                                        sendObjective = ConstanUtil.OBJECTIVES[0];                                    }                                    if (ConstanUtil.remoteLogin) {                                        ResponeUtils.sendParamInstruction(ResponeUtils.PARAM_TYPE_CONTRAST_TYPE, sendObjective, userName);                                    } else {                                        if(bindService!=null)                                        bindService.sendCameraParam(PARAM_TYPE_CONTRAST, sendObjective);                                    }                                } else {                                    // Log.e("Aye", "showObjectivPopupWindow");                                    showObjectivPopupWindow(view);                                }                            }                        });                    }                } else {  //索引为0 的是激发块和灯光着色选择 :                    secondSettingColor = (ImageView) view.findViewById(R.id.light_info);                    view.findViewById(R.id.text_multiple).setVisibility(View.GONE);                    secondSettingColor.setVisibility(View.VISIBLE);                    // 灯监听                    rayMenu.addItem(view, new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            if (DataDepot.autophoto_view == 3) {                                UIUtil.toast(activity, "需停止自动拍照才能进行此项操作");                                return;                            }                            if (DataDepot.uartisbusy) {                                UIUtil.toast(activity, "机器正忙,请稍等。。。");                                return;                            }                            showSaturationPopupWindow(view);                        }                    });                }            }        }        if (ConstanUtil.ROCKER) {            initRockerListener();        } else {            mRockerView.setVisibility(View.GONE);        }    }    private void exportDiolog() {        final Dialog exportDialog = new Dialog(this, R.style.Dialog_Radio);        exportDialog.setContentView(R.layout.export_dialog);        exportDialog.setCancelable(true);        exportDialog.setCanceledOnTouchOutside(true);        TextView cancel = (TextView) exportDialog.findViewById(R.id.cancel_tv);        final TextView delete = (TextView) exportDialog.findViewById(R.id.delete_tv);        TextView keep = (TextView) exportDialog.findViewById(R.id.keep_tv);        cancel.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                exportDialog.dismiss();            }        });        delete.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if(bindService!=null)                bindService.sendExportParam(true);                exportDialog.dismiss();            }        });        keep.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if(bindService!=null)                bindService.sendExportParam(false);                exportDialog.dismiss();            }        });        exportDialog.show();    }    private PopupWindow satePop;    private Contrack_Set_Adapter contrackAdapter;    private ListView msateListView = null;    private List<Integer> integers = new ArrayList<>();    private GrothRateDialog grothRateDialog;    private void showGrothRate() {        integers.clear();        int mInteval = 10;        String intevalAndPercentage = DataDepot.intevalAndPercentage;        String spustr = (String) SPUtils.get(this, "percentage", null);        if (intevalAndPercentage == null || intevalAndPercentage.equals("null")) {            if (spustr == null) {                UIUtil.toast(this, "暂无数据！");                return;            } else {                intevalAndPercentage = spustr;            }        }        String[] strings = intevalAndPercentage.split("&");        if (strings == null)            return;        Log.i(TAG, "test=" + strings.length);        for (int i = 0; i < strings.length; i++) {            if (i == 0) {                Log.i(TAG, "strings[0]=" + strings[0]);                if (strings[0] != null && !strings[0].equals("null")) {                    mInteval = Integer.valueOf(strings[0]);                }            } else {                if (strings[i] != null && !strings[i].equals("null")) {                    Log.i(TAG, "strings[i]=" + strings[i]);                    int it = Integer.valueOf(strings[i]);                    integers.add(it);                }            }        }        Log.i(TAG, "mInteval=" + mInteval);        for (int i = 0; i < integers.size(); i++) {            Log.i(TAG, "integers=" + integers.get(i));        }        if (grothRateDialog!=null) {            if(grothRateDialog.isShowing())            grothRateDialog.dismiss();            grothRateDialog = null;        }        grothRateDialog = new GrothRateDialog(MasterActivity.this, 3, integers, mInteval);        grothRateDialog.setCancelable(true);        grothRateDialog.setCanceledOnTouchOutside(true);        grothRateDialog.show();    }    private void showAutoPhotoSateXY(View v) {        View sateview = LayoutInflater.from(this).inflate(R.layout.autophoto_sate, null);        msateListView = ((ListView) sateview.findViewById(R.id.sate_listview));        String[] strs = new String[DataUtil.CONTRACKCOUNT];        for (int i = 0; i < strs.length; i++) {            strs[i] = "第" + (i + 1) + "组:";        }        contrackAdapter = new Contrack_Set_Adapter(MasterActivity.this, strs, DataUtil.CheckNums);        msateListView.setAdapter(contrackAdapter);        msateListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                boolean b = contrackAdapter.setSelectPosition(position);                if(bindService!=null)                bindService.sendState(position, b);            }        });        WindowManager windowManager = (WindowManager) getSystemService(Context.WINDOW_SERVICE);        int xPos = windowManager.getDefaultDisplay().getWidth() / 4;        int yPos = windowManager.getDefaultDisplay().getHeight() / 30 * 7;        satePop = new PopupWindow(sateview, xPos, yPos, true);        satePop.setTouchable(true);        // 如果不设置PopupWindow的背景，无论是点击外部区域还是Back键都无法dismiss弹框        satePop.setBackgroundDrawable(getResources().getDrawable(                R.drawable.toast_background));        // 设置好参数之后再show        satePop.showAsDropDown(v);    }    private ImageView whiteLight, greenLight, blueLight, purpleLight;    private RelativeLayout blacklight, writerl, greenrl, bluerl, purplerl;    private PopupWindow saturationPopupWindow;    private FrameLayout zeroframe, oneframe, twoframe, treeframe, fourframe;    //激发块弹出窗    private void showSaturationPopupWindow(View view) {        View contentview = LayoutInflater.from(activity).inflate(R.layout.saturationpopupwindow, null);        whiteLight = (ImageView) contentview.findViewById(R.id.saturation_white);        greenLight = (ImageView) contentview.findViewById(R.id.saturation_green);        blueLight = (ImageView) contentview.findViewById(R.id.saturation_blue);        purpleLight = (ImageView) contentview.findViewById(R.id.saturation_purple);        writerl = (RelativeLayout) contentview.findViewById(R.id.writerrl);        greenrl = (RelativeLayout) contentview.findViewById(R.id.greenrl);        bluerl = (RelativeLayout) contentview.findViewById(R.id.bluerl);        purplerl = (RelativeLayout) contentview.findViewById(R.id.purplerl);        zeroframe = (FrameLayout) contentview.findViewById(R.id.framezerofl);        oneframe = (FrameLayout) contentview.findViewById(R.id.frameonefl);        twoframe = (FrameLayout) contentview.findViewById(R.id.frametwofl);        treeframe = (FrameLayout) contentview.findViewById(R.id.frametreefl);        fourframe = (FrameLayout) contentview.findViewById(R.id.framefourfl);        blacklight = (RelativeLayout) contentview.findViewById(R.id.blackll);        writerl.setVisibility(View.GONE);        greenrl.setVisibility(View.GONE);        bluerl.setVisibility(View.GONE);        purplerl.setVisibility(View.GONE);        String[] strings = ConstanUtil.LIGHTTYPE.split(",");        if (strings.length > 0) {            if (strings.length < 4) {                blacklight.setVisibility(View.VISIBLE);            }            for (int i = 0; i < strings.length; i++) {                int light = Integer.valueOf(strings[i]);                switch (light) {                    case 1:                        zeroframe.setVisibility(View.VISIBLE);                        writerl.setVisibility(View.VISIBLE);                        break;                    case 2:                        oneframe.setVisibility(View.VISIBLE);                        greenrl.setVisibility(View.VISIBLE);                        break;                    case 3:                        twoframe.setVisibility(View.VISIBLE);                        bluerl.setVisibility(View.VISIBLE);                        break;                    case 4:                        treeframe.setVisibility(View.VISIBLE);                        purplerl.setVisibility(View.VISIBLE);                        break;                    case 5:                        blacklight.setVisibility(View.VISIBLE);                        fourframe.setVisibility(View.VISIBLE);                        break;                }            }        }        int saturation = Integer.valueOf(DataDepot.saturation);        //2016.08.02 : 修改 :新版本索引增加到5 ;        saturation = saturation % 5;        saturation = (saturation == 0 ? 0 : saturation);        switch (saturation) {            case 1:                whiteLight.setImageResource(R.mipmap.light_on);                break;            case 2:                blueLight.setImageResource(R.mipmap.light_on);                break;            case 3:                greenLight.setImageResource(R.mipmap.light_on);                break;            case 4:                purpleLight.setImageResource(R.mipmap.light_on);                break;        }        //sendCameraParam(PARAM_TYPE_SATURATION, saturation);        whiteLight.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (ConstanUtil.remoteLogin) {                    ResponeUtils.sendParamInstruction(ResponeUtils.PARAM_TYPE_SATURATION_TYPE, 1, userName);                } else {                    if(bindService!=null)                    bindService.sendCameraParam(PARAM_TYPE_SATURATION, 1);                }                if (saturationPopupWindow != null)                    saturationPopupWindow.dismiss();            }        });        greenLight.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (ConstanUtil.remoteLogin) {                    ResponeUtils.sendParamInstruction(ResponeUtils.PARAM_TYPE_SATURATION_TYPE, 3, userName);                } else {                    if(bindService!=null)                    bindService.sendCameraParam(PARAM_TYPE_SATURATION, 3);                }                if (saturationPopupWindow != null)                    saturationPopupWindow.dismiss();            }        });        blueLight.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (ConstanUtil.remoteLogin) {                    ResponeUtils.sendParamInstruction(ResponeUtils.PARAM_TYPE_SATURATION_TYPE, 2, userName);                } else {                    if(bindService!=null)                    bindService.sendCameraParam(PARAM_TYPE_SATURATION, 2);                }                if (saturationPopupWindow != null)                    saturationPopupWindow.dismiss();            }        });        purpleLight.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (ConstanUtil.remoteLogin) {                    ResponeUtils.sendParamInstruction(ResponeUtils.PARAM_TYPE_SATURATION_TYPE, 4, userName);                } else {                    if(bindService!=null)                    bindService.sendCameraParam(PARAM_TYPE_SATURATION, 4);                }                if (saturationPopupWindow != null)                    saturationPopupWindow.dismiss();            }        });        blacklight.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (ConstanUtil.remoteLogin) {                    ResponeUtils.sendParamInstruction(ResponeUtils.PARAM_TYPE_SATURATION_TYPE, 0, userName);                } else {                    if(bindService!=null)                    bindService.sendCameraParam(PARAM_TYPE_SATURATION, 0);                }                if (saturationPopupWindow != null)                    saturationPopupWindow.dismiss();            }        });        WindowManager windowManager = (WindowManager) getSystemService(Context.WINDOW_SERVICE);        int xPos = 0;        if (ConstanUtil.LIGHTNUMBER == 1) {            xPos = windowManager.getDefaultDisplay().getWidth() / 8;        } else if (ConstanUtil.LIGHTNUMBER == 2) {            xPos = windowManager.getDefaultDisplay().getWidth() / 36 * 7;        } else {            xPos = windowManager.getDefaultDisplay().getWidth() / 4;        }        int yPos = windowManager.getDefaultDisplay().getHeight() / 5;        saturationPopupWindow = new PopupWindow(contentview, xPos,                yPos, true);        saturationPopupWindow.setTouchable(true);        saturationPopupWindow.setBackgroundDrawable(getResources().getDrawable(R.drawable.toast_background));        saturationPopupWindow.showAsDropDown(view);    }    private PopupWindow objectivepopupWindow;    private ImageView objectiveMid, objectiveMin, objectiveMax;    private TextView oMidTv, oMinTv, oMaxTv;    //物镜倍数选择弹出窗    private void showObjectivPopupWindow(View view) {        View contentview = LayoutInflater.from(activity).inflate(R.layout.objectivepopupwindow, null);        objectiveMax = (ImageView) contentview.findViewById(R.id.objective_max);        objectiveMid = (ImageView) contentview.findViewById(R.id.objective_mid);        objectiveMin = (ImageView) contentview.findViewById(R.id.objective_min);        oMinTv = (TextView) contentview.findViewById(R.id.objective_min_tv);        oMidTv = (TextView) contentview.findViewById(R.id.objective_mid_tv);        oMaxTv = (TextView) contentview.findViewById(R.id.objective_max_tv);        objectiveMid.setBackgroundColor(getResources().getColor(R.color.WHITE));        objectiveMin.setBackgroundColor(getResources().getColor(R.color.WHITE));        objectiveMax.setBackgroundColor(getResources().getColor(R.color.WHITE));        oMinTv.setText(ConstanUtil.OBJECTIVES[0] + "X");        oMidTv.setText(ConstanUtil.OBJECTIVES[1] + "X");        oMaxTv.setText(ConstanUtil.OBJECTIVES[2] + "X");        int multiple = Integer.valueOf(DataDepot.contrast);        //初始化        for (int i = 0; i < ConstanUtil.OBJECTIVES.length; i++) {            if (multiple == ConstanUtil.OBJECTIVES[i]) {                switch (i) {                    case 0:                        objectiveMin.setBackgroundColor(getResources().getColor(R.color.GRAY));                        break;                    case 1:                        objectiveMid.setBackgroundColor(getResources().getColor(R.color.GRAY));                        break;                    case 2:                        objectiveMax.setBackgroundColor(getResources().getColor(R.color.GRAY));                        break;                }            }        }        objectiveMin.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                objectiveMid.setBackgroundColor(getResources().getColor(R.color.WHITE));                objectiveMin.setBackgroundColor(getResources().getColor(R.color.GRAY));                objectiveMax.setBackgroundColor(getResources().getColor(R.color.WHITE));                if(bindService!=null)                bindService.sendCameraParam(PARAM_TYPE_CONTRAST, ConstanUtil.OBJECTIVES[0]);                if (objectivepopupWindow != null) {                    objectivepopupWindow.dismiss();                }            }        });        objectiveMid.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                objectiveMid.setBackgroundColor(getResources().getColor(R.color.GRAY));                objectiveMin.setBackgroundColor(getResources().getColor(R.color.WHITE));                objectiveMax.setBackgroundColor(getResources().getColor(R.color.WHITE));                if(bindService!=null)                bindService.sendCameraParam(PARAM_TYPE_CONTRAST, ConstanUtil.OBJECTIVES[1]);                if (objectivepopupWindow != null) {                    objectivepopupWindow.dismiss();                }            }        });        objectiveMax.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                objectiveMid.setBackgroundColor(getResources().getColor(R.color.WHITE));                objectiveMin.setBackgroundColor(getResources().getColor(R.color.WHITE));                objectiveMax.setBackgroundColor(getResources().getColor(R.color.GRAY));                if(bindService!=null)                bindService.sendCameraParam(PARAM_TYPE_CONTRAST, ConstanUtil.OBJECTIVES[2]);                if (objectivepopupWindow != null) {                    objectivepopupWindow.dismiss();                }            }        });        WindowManager windowManager = (WindowManager) getSystemService(Context.WINDOW_SERVICE);        int xPos = windowManager.getDefaultDisplay().getWidth() / 4;        int yPos = windowManager.getDefaultDisplay().getHeight() / 5;        objectivepopupWindow = new PopupWindow(contentview,                xPos, yPos, true);        objectivepopupWindow.setTouchable(true);        objectivepopupWindow.setBackgroundDrawable(getResources().getDrawable(                R.drawable.toast_background));        objectivepopupWindow.showAsDropDown(view);    }    //自动对焦选择弹出窗    private PopupWindow autofocuspopupWindow;    private TextView carrier_tv, petridish_tv, plate_tv;    private void showAutoFocusPopupWindow(View view) {        // 一个自定义的布局，作为显示的内容        View contentView = LayoutInflater.from(activity).inflate(                R.layout.autofocuspop_window, null);        carrier_tv = (TextView) contentView.findViewById(R.id.carrier_tv);        petridish_tv = (TextView) contentView.findViewById(R.id.petridish_tv);        plate_tv = (TextView) contentView.findViewById(R.id.plate_tv);        int vessels = 0;        if (DataDepot.vessels != null || !DataDepot.vessels.equals("")) {            vessels = Integer.valueOf(DataDepot.vessels);        }        switch (vessels) {            case 0://默认为载玻片                carrier_tv.setTextColor(getResources().getColor(R.color.ORANGERED));                break;            case 1:                carrier_tv.setTextColor(getResources().getColor(R.color.ORANGERED));                break;            case 2:                petridish_tv.setTextColor(getResources().getColor(R.color.ORANGERED));                break;            case 3:                plate_tv.setTextColor(getResources().getColor(R.color.ORANGERED));                break;        }        carrier_tv.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                carrier_tv.setTextColor(getResources().getColor(R.color.ORANGERED));                petridish_tv.setTextColor(getResources().getColor(R.color.BLACK));                plate_tv.setTextColor(getResources().getColor(R.color.BLACK));                DataDepot.vessels = "1";                // Log.w("MasterActivity", "自动对焦选择框 carrier");                if (ConstanUtil.remoteLogin) {                    ResponeUtils.sendParamInstruction(ResponeUtils.PARAM_TYPE_VESSELS_TYPE, 1, userName);                } else {                    if(bindService!=null)                    bindService.sendCameraParam(PARAM_TYPE_VESSELS, 1);                }                if (autofocuspopupWindow != null) {                    autofocuspopupWindow.dismiss();                }            }        });        petridish_tv.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                carrier_tv.setTextColor(getResources().getColor(R.color.BLACK));                petridish_tv.setTextColor(getResources().getColor(R.color.ORANGERED));                plate_tv.setTextColor(getResources().getColor(R.color.BLACK));                DataDepot.vessels = "2";                if (ConstanUtil.remoteLogin) {                    ResponeUtils.sendParamInstruction(ResponeUtils.PARAM_TYPE_VESSELS_TYPE, 2, userName);                } else {                    if(bindService!=null)                        bindService.sendCameraParam(PARAM_TYPE_VESSELS, 2);                }                if (autofocuspopupWindow != null) {                    autofocuspopupWindow.dismiss();                }            }        });        plate_tv.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                carrier_tv.setTextColor(getResources().getColor(R.color.BLACK));                petridish_tv.setTextColor(getResources().getColor(R.color.BLACK));                plate_tv.setTextColor(getResources().getColor(R.color.ORANGERED));                if (ConstanUtil.remoteLogin) {                    ResponeUtils.sendParamInstruction(ResponeUtils.PARAM_TYPE_VESSELS_TYPE, 3, userName);                } else {                    if(bindService!=null)                    bindService.sendCameraParam(PARAM_TYPE_VESSELS, 3);                }                DataDepot.vessels = "3";                if (autofocuspopupWindow != null) {                    autofocuspopupWindow.dismiss();                }            }        });        WindowManager windowManager = (WindowManager) getSystemService(Context.WINDOW_SERVICE);        int xPos = windowManager.getDefaultDisplay().getWidth() / 12 * 4;        int yPos = windowManager.getDefaultDisplay().getHeight() / 6;        autofocuspopupWindow = new PopupWindow(contentView,                xPos, yPos, true);        autofocuspopupWindow.setTouchable(true);        autofocuspopupWindow.setBackgroundDrawable(getResources().getDrawable(                R.drawable.toast_background));        autofocuspopupWindow.showAsDropDown(view);    }    private Handler stepTimeHandler;    private Runnable mTicker;    long startTime = 0;    private void stopTime() {        //停止计时 Remove any pending posts of Runnable r that are in the message queue.        if (stepTimeHandler != null)            stepTimeHandler.removeCallbacks(mTicker);        timeView.setVisibility(View.GONE);    }    public String showTimeCount(long time) {        if (time >= 360000000) {            return "00:00:00";        }        String timeCount = "";        long hourc = time / 3600000;        String hour = "0" + hourc;        hour = hour.substring(hour.length() - 2, hour.length());        long minuec = (time - hourc * 3600000) / (60000);        String minue = "0" + minuec;        minue = minue.substring(minue.length() - 2, minue.length());        long secc = (time - hourc * 3600000 - minuec * 60000) / 1000;        String sec = "0" + secc;        sec = sec.substring(sec.length() - 2, sec.length());        timeCount = hour + ":" + minue + ":" + sec;        return timeCount;    }    private Callback.Cancelable mPicNameCallback;    private RequestQueue mQueue;    //2016.07.29 : 修改 : 修改激发光索引 :    // TODO: 2016/7/29 : 新版本 激发块的 输入号位 :    public static final int LIGHT_SATURATION_WHITE = 1;    public static final int LIGHT_SATURATION_BLACK = 0;    public static final int LIGHT_SATURATION_BLUE = 2;    public static final int LIGHT_SATURATION_GREEN = 3;    public static final int LIGHT_SATURATION_PURPLE = 4;    //按钮着色    private void setRayMenuColor(int saturation) {        switch (saturation) {            case LIGHT_SATURATION_WHITE:                rayMenu.getMasterSettingMultiple().setTextColor(getResources().getColor(R.color.BLACK));                secondSettingColor.setBackground(getResources().getDrawable(R.drawable.icon_bg_setting_light_white));                rayMenu.getMasterSettingColor().setBackground(getResources().getDrawable(R.drawable.icon_bg_setting_light_white));                break;            case LIGHT_SATURATION_BLUE:                rayMenu.getMasterSettingMultiple().setTextColor(getResources().getColor(R.color.WHITE));                secondSettingColor.setBackground(getResources().getDrawable(R.drawable.icon_bg_setting_light_blue));                rayMenu.getMasterSettingColor().setBackground(getResources().getDrawable(R.drawable.icon_bg_setting_light_blue));                break;            case LIGHT_SATURATION_BLACK:                rayMenu.getMasterSettingMultiple().setTextColor(getResources().getColor(R.color.WHITE));                secondSettingColor.setBackground(getResources().getDrawable(R.drawable.icon_bg_setting_light_black));                rayMenu.getMasterSettingColor().setBackground(getResources().getDrawable(R.drawable.icon_bg_setting_light_black));                break;            case LIGHT_SATURATION_GREEN:                rayMenu.getMasterSettingMultiple().setTextColor(getResources().getColor(R.color.BLACK));                secondSettingColor.setBackground(getResources().getDrawable(R.drawable.icon_bg_setting_light_green));                rayMenu.getMasterSettingColor().setBackground(getResources().getDrawable(R.drawable.icon_bg_setting_light_green));                break;            //2016.07.29 : 新增 :            //饱和灯光 颜色 : 紫色            case LIGHT_SATURATION_PURPLE:                rayMenu.getMasterSettingMultiple().setTextColor(getResources().getColor(R.color.WHITE));                secondSettingColor.setBackground(getResources().getDrawable(R.drawable.icon_bg_setting_light_purple));                rayMenu.getMasterSettingColor().setBackground(getResources().getDrawable(R.drawable.icon_bg_setting_light_purple));                break;        }    }    private Dialog delayAutoPhoto;    private void showDelayAutoPhoto(String str) {        if (delayAutoPhoto != null) {            delayAutoPhoto.dismiss();            delayAutoPhoto = null;        }        delayAutoPhoto = new Dialog(MasterActivity.this, R.style.Dialog_Radio);        delayAutoPhoto.setContentView(R.layout.dialog_ap_delay);        delayAutoPhoto.setCancelable(false);        delayAutoPhoto.setCanceledOnTouchOutside(false);        TextView tv = (TextView) delayAutoPhoto.findViewById(R.id.tv_dialog);        tv.setText(str);        delayAutoPhoto.show();    }    private Object synchronos = new Object();    private ExecutorService mExecutorService = Executors.newFixedThreadPool(1);    public void getPicture() {        mExecutorService.execute(new Runnable() {            @Override            public void run() {                GBaseHttpParams picParams = new GBaseHttpParams(Constant.HTTP_PROTOCOL + Constant.HTTP_URI + Constant.CAMERA_GETPHOTOLIST);                Map<String, String> getPicMap = new HashMap<>();                getPicMap.put("page", String.valueOf("1"));                picParams.putGETParams(getPicMap);                mPicNameCallback = GXHttpManager.getWithJSON(MasterActivity.this, GXHttpManager.METHOD_GET, picParams, new CommonActionCallBackString(MasterActivity.this) {                    @Override                    public void callBackWithJSON(String json) {                        com.alibaba.fastjson.JSONObject object = JSON.parseObject(json);                        com.alibaba.fastjson.JSONArray array = object.getJSONArray("list");                        List<String> strings = Arrays.asList(array.toArray(new String[array.size()]));                        for (int i = 0; i < strings.size(); i++) {                            String medianame = strings.get(i);                            if (medianame.contains("scaled") || medianame.contains("mp4")) {                                boolean isPic = medianame.contains(".bmp");                                if (isPic) {                                    //Log.e("AyeI", "medianame= " + medianame);                                    if (tp_ProgressBar.getVisibility() == View.VISIBLE) {                                        tp_ProgressBar.setVisibility(View.GONE);                                    }                                    FrescoTool.displayImage(Constant.HTTP_PROTOCOL + Constant.HTTP_URI + Constant.CAMERA_GETPHOTO + "?picname=" + medianame, btn_photo_album);                                    break;                                }                            }                        }                    }                    @Override                    public void onFailure(HttpException error, String msg) {                    }                });            }        });    }    private long getTotalRxBytes() {        return TrafficStats.getUidRxBytes(getApplicationInfo().uid) == TrafficStats.UNSUPPORTED ? 0 : (TrafficStats.getTotalRxBytes() / 1024);//转为KB    }    private Object object = new Object();    @Override    protected void onNewIntent(Intent intent) {        super.onNewIntent(intent);        setIntent(intent);        String autophotoview = intent.getStringExtra("autophotoview");        if (autophotoview != null) {            if (autophotoview.equals("prepare")) {                Toast.makeText(MasterActivity.this, "点拍照，进入自动拍照", Toast.LENGTH_LONG).show();            }        }    }    @Override    public boolean onTouchEvent(MotionEvent event) {        if (mGestureDetector.onTouchEvent(event)) {            return true;        }        // 处理手势结束        switch (event.getAction() & MotionEvent.ACTION_MASK) {            case MotionEvent.ACTION_UP:                endGesture();                scrolling = false;                break;        }        //2016.08.03 : 添加手机端单击暂停自动对焦或快速对焦 :        if(bindService!=null)        bindService.senStopAutoFocus();        super.onTouchEvent(event);        return true;    //返回true , 告诉系统 , 双击操作已经处理 !    }    /**     * 手势结束     */    public void endGesture() {        mISO = -1;        mBrightness = -1;        // 隐藏        // mDismissHandler.sendEmptyMessageDelayed(HANDLE_MESSAGE_DISMISS_LAYOUT, 500);    }    public static final int HANDLE_MESSAGE_DISMISS_LAYOUT = 0;    public static final int HANDLE_MESSAGE_SHOW_LAYOUT = 1;    public static final int HANDLE_MESSAGE_DISPLAY_ISO = 0X12;    public static final int HANDLE_MESSAGE_DISPLAY_BRIGHTNESS = 0X13;    public static final int HANDLE_MESSAGE_DISPLAY_FOCUS = 0X14;    public static final int HANDLE_MESSAGE_DISMISS_ISO = 0X15;    public static final int HANDLE_MESSAGE_DISMISS_BRIGHTNESS = 0X16;    public static final int HANDLE_MESSAGE_DISMISS_FOCUS = 0X17;    public static final int HANDLE_MESSAGE_DISMISS_PROGRESS = 0X18;    public static final int HANDLE_MESSAGE_LISTENING = 0X19;    private int loginNumber = 2;//登录次数；    private boolean isListnessConnect = false;//是否监听数据更新    /**     * 定时隐藏     */    private Handler mDismissHandler = new Handler() {        @Override        public void handleMessage(Message msg) {            switch (msg.what) {                case HANDLE_MESSAGE_DISMISS_LAYOUT:                    mISOBrightnessLayout.setVisibility(View.GONE);                    break;                case HANDLE_MESSAGE_SHOW_LAYOUT:                    mISOBrightnessLayout.setVisibility(View.VISIBLE);                    break;                case HANDLE_MESSAGE_DISPLAY_ISO:                    Integer gain = Integer.valueOf(DataDepot.gain);                    String lable = "";                    switch (gain) {                        case 0:                            lable = "100";                            break;                        case 16:                            lable = "200";                            break;                        case 32:                            lable = "400";                            break;                        case 48:                            lable = "800";                            break;                        case 64:                            lable = "1600";                            break;                        case 80:                            lable = "3200";                            break;                        case 100:                            lable = "6400";                            break;                    }                    mOperationPercent.setText(lable);                    brightnessSetup.setVisibility(View.GONE);                    focusSetup.setVisibility(View.GONE);                    isoSetup.setVisibility(View.VISIBLE);                    mOperationBg.setImageResource(R.mipmap.iso);                    //  mISOBrightnessLayout.setVisibility(View.VISIBLE);                    break;                case HANDLE_MESSAGE_DISPLAY_FOCUS:                    mOperationPercent.setText(DataDepot.gamma);                    brightnessSetup.setVisibility(View.GONE);                    focusSetup.setVisibility(View.VISIBLE);                    isoSetup.setVisibility(View.GONE);                    mOperationBg.setImageResource(R.mipmap.mf_bg);                    // mISOBrightnessLayout.setVisibility(View.VISIBLE);                    break;                case HANDLE_MESSAGE_DISPLAY_BRIGHTNESS:                    mOperationPercent.setText(DataDepot.brightness);                    brightnessSetup.setVisibility(View.VISIBLE);                    focusSetup.setVisibility(View.GONE);                    isoSetup.setVisibility(View.GONE);                    mOperationBg.setImageResource(R.mipmap.brightness_bg);                    mISOBrightnessLayout.setVisibility(View.VISIBLE);                    break;                case HANDLE_MESSAGE_DISMISS_BRIGHTNESS:                    brightnessSetup.setVisibility(View.GONE);                    if (focusSetup.getVisibility() == View.GONE && isoSetup.getVisibility() == View.GONE) {                        mISOBrightnessLayout.setVisibility(View.GONE);                    }                    break;                case HANDLE_MESSAGE_DISMISS_FOCUS:                    focusSetup.setVisibility(View.GONE);                    if (brightnessSetup.getVisibility() == View.GONE && isoSetup.getVisibility() == View.GONE) {                        mISOBrightnessLayout.setVisibility(View.GONE);                    }                    break;                case HANDLE_MESSAGE_DISMISS_ISO:                    isoSetup.setVisibility(View.GONE);                    if (focusSetup.getVisibility() == View.GONE && brightnessSetup.getVisibility() == View.GONE) {                        mISOBrightnessLayout.setVisibility(View.GONE);                    }                    break;                case HANDLE_MESSAGE_DISMISS_PROGRESS:                    if (loginNumber > 0) {                        loginNumber--;                        UIUtil.toast(MasterActivity.this, "链接失败，正在重新链接！");                        if(bindService!=null)                        bindService.init();                    } else {                        Intent intent = new Intent(MasterActivity.this, SelectConnectActivity.class);                        UIUtil.toast(MasterActivity.this, "链接失败，请检测网络再重新链接");                        startActivity(intent);                        finish();                    }                    break;                case HANDLE_MESSAGE_LISTENING:                    if (isListnessConnect) {                        isListnessConnect =false;                        UIUtil.toast(MasterActivity.this, "链接异常，请重新登录");                        Intent intent = new Intent(MasterActivity.this, SelectConnectActivity.class);                        startActivity(intent);                        finish();                    }else {                        if(bindService!=null)                            bindService.init();                        isListnessConnect = true;                    }                    break;            }        }    };    class ExplosionView extends ImageView {        public ExplosionView(Context context) {            super(context);        }        /* //handle the location of the explosion         public void setLocation(int top, int left) {             this.setFrame(left, top, left+288, top+288);         }*/        public void setLocation(int x, int y) {            this.setFrame(x - (this.getWidth() / 2), y + this.getHeight() / 2, x + this.getWidth() / 2, y - this.getHeight() / 2);        }    }    private long lastClickTimer = 0;    private boolean isFastDoubleClick() {        long time = System.currentTimeMillis();        long timeD = time - lastClickTimer;        if (timeD >= 0 && timeD <= 500) {            lastClickTimer = 0;            return true;        } else {            lastClickTimer = time;            return false;        }    }    private boolean isfistAutoFucus = true;    private class MyGestureListener extends GestureDetector.SimpleOnGestureListener {        @Override        public boolean onDoubleTapEvent(MotionEvent e) {            if (isFastDoubleClick()) {                if (DataDepot.padWidth == 0 || DataDepot.padHeight == 0 || DataDepot.cameraWidth == 0 || DataDepot.cameraHeight == 0) {                    return super.onDoubleTapEvent(e);                }                float mNewX = e.getX(), mNewY = e.getY();                Display disp = getWindowManager().getDefaultDisplay();                final int windowWidth = disp.getWidth();                final int windowHeight = disp.getHeight();                boolean isIsoArea = ((mNewX < windowWidth / 4) || (mNewX > (windowWidth / 3) * 2));                boolean isBArea = (mNewY > (windowHeight / 4) * 3);                if (isBArea || isIsoArea) {                    return true;                }                //mFocusBackground.stop();//停止上一个帧动画                int width = focusimageview.getWidth();                int height = focusimageview.getHeight();                if (isfistAutoFucus) {                    focusimageview.setLocation(((int) mNewX - width / 2) - 180, ((int) mNewY - height / 2) - 180);                } else {                    focusimageview.setLocation((int) mNewX - width / 2, (int) mNewY - height / 2);                }                Log.e("Ayex", "x=" + ((int) mNewX - width / 2) + " y= " + ((int) mNewY - height / 2));                if (isfistAutoFucus) {                    isfistAutoFucus = false;                    moveLocation(focusimageview, mNewX - width / 2 - 180, mNewY - height / 2 - 180                    );                } else {                    moveLocation(focusimageview, mNewX - width / 2, mNewY - height / 2);                }                focusimageview.setVisibility(View.VISIBLE);                mFocusBackground.start();                myImgHandler.sendEmptyMessageDelayed(2, 2000);//两秒后隐藏mISOView                int screenX = GScreenUtils.getScreenWidth(MasterActivity.this);                int screenY = GScreenUtils.getScreenHeight(MasterActivity.this);                float padX = mNewX * DataDepot.padWidth / screenX;                float padY = mNewY * DataDepot.padHeight / screenY;                float cameraX = padX * DataDepot.cameraWidth / DataDepot.padWidth;                float padRealHeight = DataDepot.padWidth * DataDepot.cameraHeight / DataDepot.cameraWidth;                float cameraY = (padY + (padRealHeight - DataDepot.padHeight) / 2) * DataDepot.cameraHeight / padRealHeight;                final int mcameraX = (int) mNewX * DataDepot.cameraWidth / screenX;                final int mcameraY = (int) mNewY * DataDepot.cameraHeight / screenY;                Log.w("Aye", "cameraX " + mcameraX + " cameraY " + mcameraY);                //  Log.e("Aye", "screenX " + screenX + " screenY " + screenY + " padX " + padX + " padY " + padY + " cameraX " + cameraX + " padRealHeight " + padRealHeight + " cameraY " + cameraY);                int isoParam = ByteUtil.getInt(ByteUtil.byteMerger(ByteUtil.short2Byte((short) cameraX), ByteUtil.short2Byte((short) cameraY)));                if (DataDepot.autophoto_view == 3) {                    UIUtil.toast(activity, "需停止自动拍照才能进行此项操作");                } else {                    if(bindService!=null)                    bindService.sendAutoFocus(mcameraX, mcameraY, isoParam);                }            }            return true;    //返回true , 告诉系统 , 双击操作已经处理 !        }        /**         * 滑动         */        @Override        public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {            mDismissHandler.removeMessages(0);            final float mOldX = e1.getX(), mOldY = e1.getY();            float mNewX = e2.getX(), mNewY = e2.getY();            final int y = (int) e2.getRawY();            final int x = (int) e2.getRawX();            Display disp = getWindowManager().getDefaultDisplay();            final int windowWidth = disp.getWidth();            final int windowHeight = disp.getHeight() - 200;            if (mOldX < windowWidth / 4 && mNewX < windowWidth / 4) {                ///onISOSlide((mOldY - y) / windowHeight);                mDismissHandler.sendEmptyMessage(MasterActivity.HANDLE_MESSAGE_DISPLAY_ISO);                mDismissHandler.sendEmptyMessageDelayed(MasterActivity.HANDLE_MESSAGE_DISMISS_ISO, 3000);                mDismissHandler.removeMessages(MasterActivity.HANDLE_MESSAGE_SHOW_LAYOUT);                mDismissHandler.sendEmptyMessage(MasterActivity.HANDLE_MESSAGE_SHOW_LAYOUT);                mDismissHandler.sendEmptyMessageDelayed(MasterActivity.HANDLE_MESSAGE_DISMISS_LAYOUT, 3000);            }            if (mOldX > windowWidth * 3 / 4 && mNewX > windowWidth * 3 / 4) {                // onGammaSlide((mOldY - y) / windowHeight);                mDismissHandler.sendEmptyMessage(MasterActivity.HANDLE_MESSAGE_DISPLAY_FOCUS);                mDismissHandler.sendEmptyMessageDelayed(MasterActivity.HANDLE_MESSAGE_DISMISS_FOCUS, 3000);                mDismissHandler.removeMessages(MasterActivity.HANDLE_MESSAGE_SHOW_LAYOUT);                mDismissHandler.sendEmptyMessage(MasterActivity.HANDLE_MESSAGE_SHOW_LAYOUT);                mDismissHandler.sendEmptyMessageDelayed(MasterActivity.HANDLE_MESSAGE_DISMISS_LAYOUT, 3000);            }            if (mOldY > windowHeight * 4 / 5 && mNewY > windowHeight * 4 / 5                    && mOldX > windowWidth / 4 && mNewX > windowWidth / 4                    && mOldX < windowWidth * 3 / 4 && mNewX < windowWidth * 3 / 4) {                mDismissHandler.sendEmptyMessage(MasterActivity.HANDLE_MESSAGE_DISPLAY_BRIGHTNESS);                mDismissHandler.sendEmptyMessageDelayed(MasterActivity.HANDLE_MESSAGE_DISMISS_BRIGHTNESS, 3000);                mDismissHandler.removeMessages(MasterActivity.HANDLE_MESSAGE_SHOW_LAYOUT);                mDismissHandler.sendEmptyMessage(MasterActivity.HANDLE_MESSAGE_SHOW_LAYOUT);                mDismissHandler.sendEmptyMessageDelayed(MasterActivity.HANDLE_MESSAGE_DISMISS_LAYOUT, 3000);            }            return super.onScroll(e1, e2, distanceX, distanceY);        }    }    /**     * 最大亮度     */    //    private int mMaxBrightness = 100;    //2016.08.01 修改 :    private int mMaxBrightness = 1024 * 8 - 1;    /**     * 当前亮度     */    private int mBrightness = -1;    /**     * 最大ISO     */    private int mMaxISO = 100;    /**     * 当前ISO     */    private int mISO = -1;    /**     * 最大GAMA     *     * @param percent     */    private int mMaxGamma = 15584;    /**     * 当前gama     *     * @param percent     */    private int mGamma = -1;    @Override    public void onClick(View v) {        switch (v.getId()) {            case R.id.record_layout:                if (isFastClick()) {                    return;                }                if (DataDepot.autophoto_view == 3) {                    UIUtil.toast(activity, "需停止自动拍照才能进行此项操作");                    return;                }                if (DataDepot.employMemory == null || DataDepot.employMemory.equals("")) {                    UIUtil.toast(activity, "正在检查内存大小，请稍等。。。");                    return;                }                if (DataDepot.employMemory.indexOf("MB") != -1) {                    String storage = DataDepot.employMemory.substring(0, DataDepot.employMemory.lastIndexOf("MB"));                    if (!storage.equals("")) {                        int memory = Integer.valueOf(storage.trim());                        if (memory <= 500) {                            UIUtil.toast(activity, "内存不够，请导出后再操作！");                            return;                        }                    }                    Log.i("MasterActivity", "storage=" + storage);                }                if (!recordResponsing) {                    if (ConstanUtil.remoteLogin) {                        if (DataDepot.is_record) {                            stopTime();                            UIUtil.toast(activity, "视频拍摄成功，请在相册中查看");                        } else {                            recordResponsing = false;                        }                        ResponeUtils.sendParamInstruction(ResponeUtils.CAPTURE_STILL_TYPE, 2, userName);                    } else {                        GBaseHttpParams recordParams = new GBaseHttpParams(Constant.HTTP_PROTOCOL + Constant.HTTP_URI + Constant.VIDEO_ACTION);                        Map<String, String> recordMap = new HashMap<>();                        recordMap.put("actionType", DataDepot.is_record ? "1" : "0");                        recordParams.putGETParams(recordMap);                        GXHttpManager.getWithJSON(this, GXHttpManager.METHOD_GET, recordParams, new CommonActionCallBackString(this) {                            @Override                            public void onSuccess(String msg) {                                recordResponsing = false;                                if (msg.contains("开始")) {                                    // startTime();                                } else {                                    stopTime();                                    UIUtil.toast(activity, "视频拍摄成功，请在相册中查看");                                }                            }                        });                    }                }                break;            case R.id.still_layout:                if (isFastClick()) {                    return;                }                if (DataDepot.is_record) {                    UIUtil.toast(activity, "需停止录像才能进行此项操作");                    return;                }                if (tp_ProgressBar.getVisibility() == View.VISIBLE) {                    UIUtil.toast(activity, "请等待加载完成再操作");                    return;                }                if (DataDepot.employMemory == null || DataDepot.employMemory.equals("")) {                    UIUtil.toast(activity, "正在检查内存大小，请稍等。。。");                    return;                }                if (DataDepot.employMemory.indexOf("MB") != -1) {                    String storage = DataDepot.employMemory.substring(0, DataDepot.employMemory.lastIndexOf("MB"));                    if (!storage.equals("")) {                        int memory = Integer.valueOf(storage.trim());                        if (memory <= 500) {                            UIUtil.toast(activity, "内存不够，请导出后再操作！");                            return;                        }                    }                    Log.i("MasterActivity", "storage=" + storage);                }                if (ConstanUtil.isAutophoto) {                    ConstanUtil.isAutophoto = false;                    //选择灯色                    Set<String> autoPhoto_light = SPUtils.getset(getApplicationContext(), "autoPhoto_light");                    if (autoPhoto_light == null || autoPhoto_light.size() < 1) {                        UIUtil.toast(activity, "请先设置好自动拍照的灯色");                        if(bindService!=null)                        bindService.sendCameraParam(PARAM_TYPE_STOPAUTOPHOTO, 101);                        return;                    }                    UIUtil.toast(activity, "已开始自动拍照，请稍等");                    sendAutophotoT(PARAM_TYPE_AUTOPHOTO);                } else {                    switch (DataDepot.autophoto_view) {                        case 0:                            capture();                            break;                        case 1:                            capture();                            break;                        case 2://发送自动拍照命令                            capture();                            break;                        case 3://发送停止拍照命令                            UIUtil.toast(activity, "已停止自动拍照，请稍等");                            if(bindService!=null)                            bindService.sendStopAutophoto(PARAM_TYPE_STOPAUTOPHOTO);                            break;                    }                }                break;            case R.id.btn_photo_album:                if (DataDepot.is_record) {                    UIUtil.toast(activity, "需停止录像才能进行此项操作");                    return;                }                if ((DataDepot.pngsize + DataDepot.moviessize) < 1) {                    UIUtil.toast(activity, "暂无资源可以访问");                    return;                }                if (tp_ProgressBar.getVisibility() == View.VISIBLE) {                    UIUtil.toast(activity, "请等待加载完成再操作");                    return;                }                if (ConstanUtil.remoteLogin) {                    JSONObject picture = new JSONObject();                    try {                        picture.put("picture", true);                        picture.put("filename", "null");                    } catch (JSONException e) {                        e.printStackTrace();                    }                    ResponeUtils.sendObjectInstruction(ResponeUtils.PARAM_TYPE_UpDATE_PICTER_TYPE, picture, userName);                    isListnessConnect = false;                    Intent intent = new Intent(this, RemotePhotoAlbumActivity.class);                    intent.putExtra("username", userName);                    startActivity(intent);                  //  finish();                } else {                    Intent intent = new Intent(this, PhotoAlbumActivity.class);                    intent.putExtra("username", userName);                    startActivity(intent);                }                break;            case R.id.tv_scaleplateValue:                if (ConstanUtil.IS_SELF_CHECK) {                    System.arraycopy(mHits, 1, mHits, 0, mHits.length - 1);                    mHits[mHits.length - 1] = SystemClock.uptimeMillis();                    if (mHits[0] >= (SystemClock.uptimeMillis() - 500)) {                        for (int i = 0; i < mHits.length; i++) {                            mHits[i] = 0;                        }                        Toast.makeText(activity, "已发送自检指令", Toast.LENGTH_SHORT).show();                        if(bindService!=null)                        bindService.sendCameraParam(PARAM_TYPE_SELF_CHECK, 1);                    }                }                break;        }    }    private void sendAutophotoT(int type) {        String startTime = (String) SPUtils.get(getBaseContext(), "autoPhoto_startTime", "1");        String tTime = (String) SPUtils.get(getBaseContext(), "autoPhoto_tTime", "1");        String finishTime = (String) SPUtils.get(getBaseContext(), "autoPhoto_finishTime", "1");        boolean autofocus = false;        Object autofocus1 = SPUtils.get(getApplicationContext(), "autofocus", false);        if (autofocus1 != null) {            autofocus = (boolean) autofocus1;        }        boolean synthetic = false;        Object synthetic1 = SPUtils.get(getApplicationContext(), "synthetic", false);        if (synthetic1 != null) {            synthetic = (boolean) synthetic1;        }        Log.e("MasterActivity", "autofocus=" + autofocus);        Log.e("MasterActivity", "synthetic=" + synthetic);        //选择灯色        Set<String> autoPhoto_light = SPUtils.getset(getApplicationContext(), "autoPhoto_light");        if (autoPhoto_light == null)            return;        Iterator iterator = autoPhoto_light.iterator();        String mlights = "";        while (iterator.hasNext()) {            String next = (String) iterator.next();            mlights += next + "&";        }        if(bindService!=null)        bindService.sendAutoPhoto(type, mlights, autofocus + "", synthetic + "", startTime, tTime, finishTime);    }    private void capture() {        if (ConstanUtil.remoteLogin) {            ResponeUtils.sendParamInstruction(ResponeUtils.CAPTURE_TYPE, 1, userName);            UIUtil.toast(activity, "中控端拍照成功,正在传输图片");        } else {            GBaseHttpParams captureParams = new GBaseHttpParams(Constant.HTTP_PROTOCOL + Constant.HTTP_URI + Constant.CAMERA_TAKEPHOTO);            GXHttpManager.getWithJSON(this, GXHttpManager.METHOD_GET, captureParams, new CommonActionCallBackString(this) {                @Override                public void onSuccess(String msg) {                    UIUtil.toast(activity, "中控端拍照成功,正在传输图片");                    if(bindService!=null)                    bindService.setBtnPhoto();                    Logger.e("Aye", "msg: " + msg);                }            });        }    }    /**     * 双击退出函数     */    public static Boolean isExit = false;    private void exitBy2Click() {        Timer tExit;        if (isExit == false) {            isExit = true; // 用户第一次按下返回键            //Toast.makeText(this, "再按一次退出程序", Toast.LENGTH_SHORT).show();            if (!ConstanUtil.remoteLogin) {                Toast.makeText(this, "再按一次退出程序", Toast.LENGTH_SHORT).show();            }            tExit = new Timer();            tExit.schedule(new TimerTask() {                @Override                public void run() {                    isExit = false; // 取消退出                }            }, 2000); // 如果2秒钟内没有按下返回键，则启动定时器取消掉刚才执行的任务        } else {            if (ConstanUtil.remoteLogin) {                if (userName != null && !userName.equals("")) {                    AVQuery<AVObject> query = new AVQuery<>("ConnectState");                    query.whereEqualTo("user", userName);                    query.getFirstInBackground(new GetCallback<AVObject>() {                        @Override                        public void done(AVObject object, AVException e) {                            JSONObject jsonObject = new JSONObject();                            try {                                jsonObject.put("flage", false);                                jsonObject.put("date", System.currentTimeMillis());                            } catch (JSONException e1) {                                e1.printStackTrace();                            }                            object.put("phonestate", jsonObject);                            AVSaveOption option = new AVSaveOption();                            option.query(new AVQuery<>("ConnectState").whereEqualTo("user", userName));                            option.setFetchWhenSave(true);                            object.saveInBackground();                        }                    });                }                UIUtil.toast(this, "两秒后自动退出");                EXECUTOR_SERVICE.schedule(new Runnable() {                    @Override                    public void run() {                        GActivityManager.getActivityManager().appExit(MasterActivity.this);                    }                }, 2000, TimeUnit.MILLISECONDS);            } else {                closeWebScoket();                GActivityManager.getActivityManager().appExit(this);            }        }    }    /**     * 菜单、返回键响应     */    @Override    public boolean onKeyDown(int keyCode, KeyEvent event) {        // TODO Auto-generated method stub        if (keyCode == KeyEvent.KEYCODE_BACK) {            exitBy2Click(); //调用双击退出函数        }        return true;    }    private void closeWebScoket() {        closeBaseActivityWebScoket();        if (picAsyncScoket != null) {            if (picAsyncScoket.tryGet() != null) {                BaseApplication.closeBySelf = true;                picAsyncScoket.tryGet().close();            }            picAsyncScoket = null;        }        if (cameraInfoScoket != null) {            if (cameraInfoScoket.tryGet() != null) {                BaseApplication.closeBySelf = true;                cameraInfoScoket.tryGet().close();            }            cameraInfoScoket = null;        }        cameraCMDScoket = null;    }    @Override    protected void onDestroy() {        if(isRegistBroadcast){            isRegistBroadcast = false;            unregisterReceiver(receive);        }        if (doingLiveQuery != null) {            doingLiveQuery.unsubscribeInBackground(new AVLiveQuerySubscribeCallback() {                @Override                public void done(AVException e) {                }            });        }        if (requestTimer != null) {            requestTimer.cancel();            requestTimer = null;        }        super.onDestroy();        if (ConstanUtil.remoteLogin)            return;        this.wakeLock.release();        if (mPicNameCallback != null) {            mPicNameCallback.cancel();            mPicNameCallback = null;        }        closeWebScoket();        if(isbind){            unbindService(conn);        }        Log.e("MasterActivity", "onDestroy");    }    private static long lastClickTime;    public synchronized static boolean isFastClick() {        long time = System.currentTimeMillis();        if (time - lastClickTime < 2000) {            return true;        }        lastClickTime = time;        return false;    }}