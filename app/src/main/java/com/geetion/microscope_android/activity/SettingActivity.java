package com.geetion.microscope_android.activity;import android.app.Activity;import android.app.AlertDialog;import android.app.Dialog;import android.content.BroadcastReceiver;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.IntentFilter;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.text.method.ScrollingMovementMethod;import android.util.Log;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.ImageView;import android.widget.ListView;import android.widget.SeekBar;import android.widget.TextView;import android.widget.Toast;import com.geetion.coreOneUtil.UIUtil;import com.geetion.log.Logger;import com.geetion.microscope_android.R;import com.geetion.microscope_android.custom.PasswordDialog;import com.geetion.microscope_android.model.WifiModel;import com.geetion.microscope_android.service.Constant;import com.geetion.microscope_android.service.DataDepot;import com.geetion.microscope_android.service.http.CommonActionCallBackString;import com.geetion.microscope_android.utils.ConstanUtil;import com.geetion.microscope_android.utils.NumberUtil;import com.geetion.microscope_android.utils.SettingUtils;import com.geetion.microscope_android.utils.WifiAdmin;import com.geetion.microscope_android.yeespec.LoginDialog;import com.geetion.xUtil.ActionCallback;import com.geetion.xUtil.GBaseHttpParams;import com.geetion.xUtil.GXHttpManager;import com.geetion.xUtil.ResponeUtils;import org.xutils.ex.HttpException;import java.lang.ref.WeakReference;import java.text.DecimalFormat;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Timer;import java.util.TimerTask;public class SettingActivity extends BaseActivity  {    /**     * 操作     */    // 关机按钮    private View turnOffBtn;    // 着色按钮    private View recolorBtn;    // 连接WIFI按钮    private View connectWIFIBtn;    // 自动更新时间按钮    private View autoUpdateTimeBtn;    // 关于我们    private View aboutBtn;    /**     * 状态     */    // 当前IP    private TextView ipView;    // 当前MAC    private TextView macView;    // 当前连接WIFI    private TextView wifiStatusView;    private TextView wifiNameView;    // 当前连接的相机    private TextView cameraStatusView;    private TextView cameraNameView;    // 当前连接的手机数量    private TextView phoneNumberView;    // 当前时间    private TextView timeView;    // 当前版本    private TextView versionView;    private View autoCapture;    /**     * 电量指示     */    private SeekBar electricitySeekBar;    private TextView electricityView;    /**     * 内存指示     *     */    private SeekBar storageSeekBar;    private TextView storageView, tvdate, tvTime;    private MyHandler myHandler  = new MyHandler(SettingActivity.this);    private class  MyHandler extends Handler{        WeakReference<SettingActivity>  activityWeakReference;        private MyHandler (SettingActivity activity){            activityWeakReference = new  WeakReference<SettingActivity>(activity);        }        @Override        public void handleMessage(Message msg) {            super.handleMessage(msg);            switch (msg.what){                case 100:                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月dd日 HH:mm:ss");                    String str = sdf.format(new Date());                    timeView.setText(str);                    myHandler.sendEmptyMessageDelayed(100,1000);                    break;            }        }    }    //密码输入框    private PasswordDialog passwordDialog;    private DecimalFormat mDecimalFormat;    private String userName;    private TextView mReturn;    @Override    protected void onCreate(Bundle savedInstanceState) {        setContentView(R.layout.activity_setting);        super.onCreate(savedInstanceState);        activity = this;        initView();//初始化界面        initListener();        initData();        setDate();//日期设置        setTime();        if(ConstanUtil.remoteLogin){            userName = getIntent().getStringExtra("username");            mReturn = ((TextView) findViewById(R.id.btn_return));            mReturn.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    Intent intent = new Intent(SettingActivity.this,MasterActivity.class);                    intent.putExtra("username",userName);                    startActivity(intent);                    finish();                }            });            startUpDate();        }else        initbroadcast();//注册广播更新平板信息    }    private Timer updateTimer;    private TimerTask timerTask;    private void startUpDate(){        timerTask = new TimerTask() {            @Override            public void run() {                runOnUiThread(new Runnable() {                    @Override                    public void run() {                        ipView.setText(DataDepot.deviceIP);                        macView.setText(DataDepot.deviceMac);                        wifiNameView.setText(DataDepot.wifi);                        wifiStatusView.setText("已链接");                        electricityView.setText(String.valueOf(DataDepot.voltagelevel) + "%");                        cameraStatusView.setText("已链接");                        phoneNumberView.setText(DataDepot.connectCount);                        int  voltagelevel=0;                        if(DataDepot.voltagelevel!=null) {                            voltagelevel = Integer.valueOf(DataDepot.voltagelevel);                        }                        electricitySeekBar.setProgress(voltagelevel);                        boolean hasSdcard = false;                        int index = 0;                        if (DataDepot.employMemory != null) {                            index = DataDepot.employMemory.indexOf(" ");                        }                        if (index > 0) {                            hasSdcard = true;                        }                        if (hasSdcard) {                            String employMemoryString = DataDepot.employMemory.trim().substring(0, index);//截取数值String                            float employMemory = Float.valueOf(employMemoryString);                            float totalMemory = Float.valueOf(DataDepot.totalMemory.replace("GB", "").trim());                            boolean isGB = DataDepot.employMemory.contains("GB");                            float lastMemory = totalMemory - (isGB ? employMemory : employMemory / 1024);                            String employ=null;                            String allmemory=null;                            if(DataDepot.employMemory.contains("GB")) {                                employ = DataDepot.employMemory.substring(0, DataDepot.employMemory.lastIndexOf(".") + 2)+"G";                            }else {                                employ =DataDepot.employMemory;                            }                            if(DataDepot.totalMemory.contains("GB")){                                allmemory = DataDepot.totalMemory.substring(0, DataDepot.totalMemory.lastIndexOf(".") + 2)+"G";                            }else {                                allmemory =DataDepot.totalMemory;                            }                            storageView.setText(employ + "可用" + "(共" +allmemory + ")");                            storageSeekBar.setMax(100);                            storageSeekBar.setProgress(100-(int)(employMemory/totalMemory*100));                        } else {                            storageView.setText("没有安装SD卡");                        }                    }                });            }        };        updateTimer = new Timer();        updateTimer.schedule(timerTask,5000,10000);    }    /**     * 日期     */    private void setDate() {        long now = System.currentTimeMillis();        Log.d("date", now + "");        Date date = new Date(now);        SimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月dd日");        String data2 = sdf.format(date);        Calendar cal = Calendar.getInstance();        int week = cal.get(Calendar.DAY_OF_WEEK);        String weekc = null;        ;        if (week - 1 == 0) {            weekc = "星期天";        }//1        if (week - 1 == 1) {            weekc = "星期一";        }//2        if (week - 1 == 2) {            weekc = "星期二";        }        if (week - 1 == 3) {            weekc = "星期三";        }        if (week - 1 == 4) {            weekc = "星期四";        }        if (week - 1 == 5) {            weekc = "星期五";        }        if (week - 1 == 6) {            weekc = "星期六";        }        tvdate.setText(data2 + " " + weekc);    }    /**     * 时间     */    private void setTime() {        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");        tvTime.setText(sdf.format(new Date()));    }    private void initView() {        tvdate = (TextView) findViewById(R.id.tv_date);        tvTime = (TextView) findViewById(R.id.tv_time);        turnOffBtn = findViewById(R.id.button_turn_off);        recolorBtn = findViewById(R.id.recolor_button);        connectWIFIBtn = findViewById(R.id.wifi_button);        autoUpdateTimeBtn = findViewById(R.id.synchronous_time_button);        aboutBtn = findViewById(R.id.about_us_button);        autoCapture = findViewById(R.id.auto_photo_select);        ipView = (TextView) findViewById(R.id.ip_view);        macView = (TextView) findViewById(R.id.mac_view);        wifiNameView = (TextView) findViewById(R.id.wifi_name_view);        wifiStatusView = (TextView) findViewById(R.id.wifi_status_view);        cameraNameView = (TextView) findViewById(R.id.camera_name_view);        cameraStatusView = (TextView) findViewById(R.id.camera_status_view);        phoneNumberView = (TextView) findViewById(R.id.phone_number_view);        timeView = (TextView) findViewById(R.id.time_view);        electricityView = (TextView) findViewById(R.id.electricity_text);        electricitySeekBar = (SeekBar) findViewById(R.id.electricity_seekBar);        versionView = ((TextView) findViewById(R.id.app_version_view));        electricitySeekBar.setMax(100);        electricitySeekBar.setEnabled(false);        storageView = (TextView) findViewById(R.id.storage_text);        storageSeekBar = (SeekBar) findViewById(R.id.storage_seekBar);        storageSeekBar.setEnabled(false);        String build_time = getString(R.string.build_time);     //输出2016-11-15 17:01        versionView.setText(build_time + " v" + NumberUtil.getApplicationVersion(this) + "版");    }    private void initbroadcast(){        IntentFilter intentFilter = new IntentFilter();        intentFilter.addAction(ConstanUtil.upDataAction);        registerReceiver(updataPadInfoBroadcast,intentFilter);    }    //广播接收更新平板传输过来的数据    private BroadcastReceiver updataPadInfoBroadcast = new BroadcastReceiver() {        @Override        public void onReceive(Context context, Intent intent) {            String action = intent.getAction();            if(action.equals(ConstanUtil.upDataAction)){                ipView.setText(DataDepot.deviceIP);                macView.setText(DataDepot.deviceMac);                wifiNameView.setText(DataDepot.wifi);                wifiStatusView.setText("已链接");                electricityView.setText(String.valueOf(DataDepot.voltagelevel) + "%");                cameraStatusView.setText("已链接");                phoneNumberView.setText(DataDepot.connectCount);                int  voltagelevel=0;                if(DataDepot.voltagelevel!=null) {                    voltagelevel = Integer.valueOf(DataDepot.voltagelevel);                }                electricitySeekBar.setProgress(voltagelevel);                boolean hasSdcard = false;                int index = 0;                if (DataDepot.employMemory != null) {                    index = DataDepot.employMemory.indexOf(" ");                }                if (index > 0) {                    hasSdcard = true;                }                // Log.e("SettingActivity","DataDepot.employMemory"+DataDepot.employMemory);                // Log.e("SettingActivity","DataDepot.totalMemory"+DataDepot.totalMemory);                if (hasSdcard) {                    String employMemoryString = DataDepot.employMemory.trim().substring(0, index);//截取数值String                    float employMemory = Float.valueOf(employMemoryString);                    float totalMemory = Float.valueOf(DataDepot.totalMemory.replace("GB", "").trim());                    boolean isGB = DataDepot.employMemory.contains("GB");                    float lastMemory = totalMemory - (isGB ? employMemory : employMemory / 1024);                    String employ=null;                    String allmemory=null;                    if(DataDepot.employMemory.contains("GB")) {                        employ = DataDepot.employMemory.substring(0, DataDepot.employMemory.lastIndexOf(".") + 2)+"G";                    }else {                        employ =DataDepot.employMemory;                    }                    if(DataDepot.totalMemory.contains("GB")){                        allmemory = DataDepot.totalMemory.substring(0, DataDepot.totalMemory.lastIndexOf(".") + 2)+"G";                    }else {                        allmemory =DataDepot.totalMemory;                    }                    storageView.setText(employ + "可用" + "(共" +allmemory + ")");                    storageSeekBar.setMax(100);                    storageSeekBar.setProgress(100-(int)(employMemory/totalMemory*100));                } else {                    storageView.setText("没有安装SD卡");                }            }        }    };    private void initListener() {        turnOffBtn.setOnClickListener(onClickListener);        recolorBtn.setOnClickListener(onClickListener);        connectWIFIBtn.setOnClickListener(onClickListener);        autoUpdateTimeBtn.setOnClickListener(onClickListener);        autoCapture.setOnClickListener(onClickListener);        aboutBtn.setOnClickListener(onClickListener);    }    private void initData() {        // TODO 获取 当前日期和时间        myHandler.sendEmptyMessageDelayed(100,1000);     //   new Thread(this).start();        // TODO 获取 当前版本号    }    private View.OnClickListener onClickListener = new View.OnClickListener() {        @Override        public void onClick(View v) {            switch (v.getId()) {                case R.id.recolor_button:                    if(ConstanUtil.isAutophotoGoing){                        Toast.makeText(SettingActivity.this, "请停止自动拍照再着色设置", Toast.LENGTH_SHORT).show();                         return;                    }                    // TODO 跳转到着色页面                    Intent intent = new Intent(SettingActivity.this, ReColourActivity.class);                    startActivity(intent);                    break;                case R.id.wifi_button:                    // TODO 弹出WIFI选择对话框                    if (SettingUtils.isWifiOpen(SettingActivity.this)) {                        initWIFISelectDialog();                    } else {                        UIUtil.toast(SettingActivity.this, "请先打开WIFI");                    }                    break;                case R.id.auto_photo_select:                    Log.e("SettingActivity","ConstanUtil.isAutophotoGoing="+ConstanUtil.isAutophotoGoing);                    if(ConstanUtil.isAutophotoGoing){                        UIUtil.toast(SettingActivity.this, "正在自动拍照，请停止自动拍照再操作");                        return;                    }                    if (DataDepot.employMemory == null || DataDepot.employMemory.equals("")) {                        UIUtil.toast(activity, "正在检查内存大小，请稍等。。。");                        return;                    }                    // TODO 跳转到时间选择页面                    Intent intent1 = new Intent(SettingActivity.this, AutoPhotoActivity.class);                    intent1.putExtra("username", userName);                    startActivity(intent1);                   //finish();                    break;                case R.id.button_turn_off:                    //2016.08.03 : 修改新增 : 显示关机确认弹窗选择 :                    // TODO APP关机                    AlertDialog.Builder builder = new AlertDialog.Builder(SettingActivity.this, AlertDialog.THEME_HOLO_LIGHT);                    builder.setMessage(R.string.really_shutdown).setOnKeyListener(new DialogInterface.OnKeyListener() {                        @Override                        public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {                            return false;                        }                    }).setCancelable(true)                            .setPositiveButton(R.string.yes, new DialogInterface.OnClickListener() {                                @Override                                public void onClick(DialogInterface dialog, int id) {                                    if(ConstanUtil.remoteLogin){                                        ResponeUtils.sendParamInstruction(ResponeUtils.PARAM_TYPE_OFF_TYPE,1,userName);                                    }else {                                        //                                    shutdown();                                        //2016.08.03 : 修改添加 : 发送关机指令给平板 :                                        GBaseHttpParams params = new GBaseHttpParams(Constant.HTTP_PROTOCOL + Constant.HTTP_URI + Constant.SHUT_DOWN);                                        GXHttpManager.getObject(SettingActivity.this, GXHttpManager.METHOD_GET, params, new ActionCallback() {                                            @Override                                            public void onSuccess(String msg) {                                                //Log.e("dddddd", "onSuccess");                                                //android.os.Process.killProcess(android.os.Process.myPid());                                            }                                            @Override                                            public void onFailure(HttpException error, String msg) {                                                UIUtil.toast(SettingActivity.this, msg);                                            }                                            @Override                                            public void onNetWorkError() {                                                UIUtil.toast(SettingActivity.this, "网络异常");                                            }                                        });                                    }                                }                            }).setNegativeButton(R.string.no, new DialogInterface.OnClickListener() {                        @Override                        public void onClick(DialogInterface dialog, int id) {                            //                            forceExit();                            dialog.dismiss();                        }                    });                    AlertDialog alert = builder.create();                    alert.show();                    break;                case R.id.synchronous_time_button:                    // TODO 与网络同步时间                    UIUtil.toast(SettingActivity.this, "正在开发中……");                    break;                case R.id.about_us_button:                    // TODO APP介绍                    intent = new Intent(SettingActivity.this, AboutActivity.class);                    startActivity(intent);                    break;            }        }    };    // 弹出WIFI选择对话框    public void initWIFISelectDialog() {        final Dialog dialog = new Dialog(this, R.style.Dialog_Radio);        dialog.setContentView(R.layout.dialog_device_select);        dialog.setCanceledOnTouchOutside(true);        TextView labelView = (TextView) dialog.findViewById(R.id.label_title);        labelView.setText("选择WIFI");        WifiAdmin wifiAdmin = new WifiAdmin(SettingActivity.this);        wifiAdmin.startScan();        final List<WifiModel> wifiModels = new ArrayList<>();        final ListView listView = (ListView) dialog.findViewById(R.id.list_content);        final WifiSelectAdapter adapter = new WifiSelectAdapter(this, wifiModels);        listView.setAdapter(adapter);        listView.setDivider(null);        listView.setDividerHeight(0);        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, final int position, long id) {                passwordDialog = new PasswordDialog(SettingActivity.this, new PasswordDialog.OnConfirmListener() {                    @Override                    public void onClick(String password) {                        if (password == null) {                            password = "";                        }                        WifiModel wifiModel = wifiModels.get(position);                        String securityMode = null;                        if (wifiModel.getSecurityMode().contains("WPA2"))                            securityMode = "WPA2";                        else if (wifiModel.getSecurityMode().contains("WEP"))                            securityMode = "WEP";                        else if (wifiModel.getSecurityMode().contains("WPA"))                            securityMode = "WPA";                        else if (wifiModel.getSecurityMode().contains("OPEN"))                            securityMode = "OPEN";                        if (securityMode != null && wifiModel != null) {                            GBaseHttpParams wifiConParams = new GBaseHttpParams(Constant.HTTP_PROTOCOL + Constant.HTTP_URI + Constant.Set_WIFI);                            Map<String, String> wifiConMap = new HashMap<>();                            wifiConMap.put("ssid", wifiModel.getWifiName());                            wifiConMap.put("password", password);                            wifiConMap.put("secureMode", securityMode);                            wifiConParams.putGETParams(wifiConMap);                            GXHttpManager.getWithJSON(SettingActivity.this, GXHttpManager.METHOD_GET, wifiConParams, new CommonActionCallBackString(SettingActivity.this) {                                @Override                                public void onSuccess(String msg) {                                    //2016.08.03 : 修改切换连接界面为弹窗切换连接 :                                    //2016.08.03 : 添加连接平板的弹窗 :                                    activity.runOnUiThread(new Runnable() {                                        @Override                                        public void run() {                                            Dialog loginDialog = LoginDialog.getLoginDialog(SettingActivity.this);                                            //                if (!loginDialog.isShowing()) {                                            //                    loginDialog.show();                                            //                }                                            loginDialog.show();                                        }                                    });                                    //                                    Intent i = new Intent(SettingActivity.this, LoginActivity.class);                                    //                                    i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);                                    //                                    startActivity(i);                                }                            });                        }                        passwordDialog.dismiss();                    }                });                passwordDialog.show();            }        });        dialog.show();        GBaseHttpParams httpParams = new GBaseHttpParams(Constant.HTTP_PROTOCOL + Constant.HTTP_URI + Constant.Get_WIFI_List);        GXHttpManager.getObjectList(this, GXHttpManager.METHOD_GET, httpParams, new ActionCallback<WifiModel>() {            @Override            public void callBackWithList(List<WifiModel> dataList) {                wifiModels.clear();                wifiModels.addAll(dataList);                adapter.notifyDataSetChanged();            }            @Override            public void onSuccess(String msg) {                Logger.e("Aye", msg);            }            @Override            public void onFailure(HttpException error, String msg) {                Toast.makeText(SettingActivity.this, msg, Toast.LENGTH_SHORT).show();            }            @Override            public void onNetWorkError() {                Toast.makeText(SettingActivity.this, "网络异常", Toast.LENGTH_SHORT).show();            }        });    }    private class WifiSelectAdapter extends ArrayAdapter<WifiModel> {        private LayoutInflater mInflater;        public WifiSelectAdapter(Context context, List<WifiModel> objects) {            super(context, -1, objects);            mInflater = LayoutInflater.from(context);        }        @Override        public View getView(int position, View convertView, ViewGroup parent) {            ViewHolder viewHolder;            if (convertView == null) {                viewHolder = new ViewHolder();                convertView = mInflater.inflate(R.layout.item_wifi_content, parent, false);                viewHolder.wifiNameView = (TextView) convertView.findViewById(R.id.wifi_name_view);                viewHolder.lockView = (ImageView) convertView.findViewById(R.id.label_lock);                viewHolder.levelView = (ImageView) convertView.findViewById(R.id.label_level);                convertView.setTag(viewHolder);            } else {                viewHolder = (ViewHolder) convertView.getTag();            }            viewHolder.wifiNameView.setText(getItem(position).getWifiName());            //加密方式Ui显示            if (getItem(position).getSecurityMode().contains("OPEN")) {                viewHolder.lockView.setVisibility(View.GONE);            } else {                viewHolder.lockView.setVisibility(View.VISIBLE);            }            //信号强度Ui显示            int nSigLevel = getItem(position).getLevel();            if (nSigLevel > 0 && nSigLevel <= 50) {                viewHolder.levelView.setImageResource(R.mipmap.wifi_1);            } else if (nSigLevel > 50 && nSigLevel <= 70) {                viewHolder.levelView.setImageResource(R.mipmap.wifi_2);            } else if (nSigLevel > 70 && nSigLevel <= 100) {                viewHolder.levelView.setImageResource(R.mipmap.wifi_3);            }            return convertView;        }        private class ViewHolder {            TextView wifiNameView;            ImageView lockView;            ImageView levelView;        }    }/*    @Override    public void run() {        // TODO Auto-generated method stub        try {            while (true) {                SimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月dd日 HH:mm:ss");                String str = sdf.format(new Date());                handler.sendMessage(handler.obtainMessage(100, str));                Thread.sleep(1000);            }        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }*/    @Override    protected void onDestroy() {        super.onDestroy();        if(ConstanUtil.remoteLogin){        }else {            if (updataPadInfoBroadcast != null) {                unregisterReceiver(updataPadInfoBroadcast);            }        }        myHandler.removeCallbacksAndMessages(null);    }}