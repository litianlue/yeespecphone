package com.geetion.microscope_android.activity;import android.content.Intent;import android.os.Bundle;import android.util.Log;import android.view.View;import android.widget.AdapterView;import android.widget.GridView;import com.alibaba.fastjson.JSON;import com.geetion.coreTwoUtil.GActivityManager;import com.geetion.log.Logger;import com.geetion.microscope_android.R;import com.geetion.microscope_android.adapter.RecolorAdapter;import com.geetion.microscope_android.service.Constant;import com.geetion.microscope_android.service.DataDepot;import com.geetion.microscope_android.service.http.CommonActionCallBackString;import com.geetion.microscope_android.utils.ConstanUtil;import com.geetion.xUtil.GBaseHttpParams;import com.geetion.xUtil.GXHttpManager;import com.koushikdutta.async.http.WebSocket;import org.xutils.common.Callback;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.util.HashMap;import java.util.Map;/** * 着色页面 */public class ReColourActivity extends BaseActivity {    private RecolorAdapter recolorAdapter;    private GridView gridView;    private Callback.Cancelable mHttpCancelable;    private boolean mResponding;    @Override    protected void onCreate(Bundle savedInstanceState) {        setContentView(R.layout.activity_recolour);        super.onCreate(savedInstanceState);        activity = this;        initView();        initListener();    }    @Override    protected void onResume() {        super.onResume();        mResponding = false;    }    @Override    protected void onPause() {        if (mHttpCancelable != null) {            mHttpCancelable.cancel();        }        mResponding = false;        super.onPause();    }    private void initView() {        gridView = (GridView) findViewById(R.id.grid_view);        recolorAdapter = new RecolorAdapter(this);        gridView.setAdapter(recolorAdapter);        recolorAdapter.notifyDataSetChanged();    }    private void retureRecolor_pos(String colorstr){        InputStream is = null;        try {            is = ReColourActivity.this.getAssets().open("colors.txt");            int postion = readTextFromSDcard(is,colorstr);            ConstanUtil.currentRecolorPosition = postion;            //BaseApplication.getInstance().setRecolor_pos(postion);        } catch (Exception e) {            // TODO Auto-generated catch block            e.printStackTrace();        } finally {            try {//关闭资源输入输出流 :                if (is != null) {                    is.close();                }            } catch (IOException e) {                e.printStackTrace();            } finally {            }        }    }    private  int  readTextFromSDcard(InputStream is, String colorstr) {        InputStreamReader reader = null;        BufferedReader bufferedReader = null;        reader = new InputStreamReader(is);        bufferedReader = new BufferedReader(reader);        StringBuffer buffer = new StringBuffer("");        String str;        int i = 0;        try {            while ((str = bufferedReader.readLine()) != null) {                buffer.append(str);                buffer.append("\n");                String[] strings = str.split(",");                if(strings.length>4){                    if(colorstr.equals(strings[4]))                        break;                }                i++;            }        } catch (IOException e) {            e.printStackTrace();        } finally {            try {                //关闭资源输入输出流 :                if (bufferedReader != null)                    bufferedReader.close();            } catch (IOException e) {                e.printStackTrace();            } finally {                try {                    //关闭资源输入输出流 :                    if (reader != null)                        reader.close();                } catch (IOException e1) {                    e1.printStackTrace();                }            }        }        return i;    }    private WebSocket cameraCMDScoket;    private void initListener() {        retureRecolor_pos(DataDepot.recolorstring.trim());        gridView.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, final int position, long id) {                if (mResponding) {                    return;                }                mResponding = true;                GBaseHttpParams httpParams = new GBaseHttpParams(Constant.HTTP_PROTOCOL + Constant.HTTP_URI + Constant.Set_Color);                Map<String, String> mapParams = new HashMap<>();                //                mapParams.put("recolor", String.valueOf(position));     //这里只是发送被点击的 item的索引位置 , 需改为直接发送着色值 ;                //2016.08.03 : 修改 :                final int colorSel = recolorAdapter.getColor(position);                final String colorString = recolorAdapter.getColorString(position);                mapParams.put("recolor", String.valueOf(colorSel));     //这里只是发送被点击的 item的索引位置 , 需改为直接发送着色值 ;                recolorAdapter.notifyDataSetChanged();                GBaseHttpParams httpParamsstr = new GBaseHttpParams(Constant.HTTP_PROTOCOL + Constant.HTTP_URI + Constant.Set_ColorString);                Map<String, String> mapParamsstr = new HashMap<>();                mapParamsstr.put("recolorstring",colorString);                Log.e("test", "ReColourActivity initListener() position = " + String.valueOf(colorSel) + "colorString = " + colorString + " === ");                if (cameraCMDScoket != null) {                    Map<String, String> mp = new HashMap<>();                    mp.clear();                    mp.put("type",colorString);                    cameraCMDScoket.send(JSON.toJSONString(mp));                    //            Logger.e("Aye", "type " + paramType + "param " + param);                }                //2016.08.03 : 新增 : 刷新适配器显示 :                httpParamsstr.putGETParams(mapParamsstr);                mHttpCancelable = GXHttpManager.getWithJSON(ReColourActivity.this,GXHttpManager.METHOD_GET,httpParamsstr,new CommonActionCallBackString(ReColourActivity.this){                    @Override                    public void onSuccess(String msg) {                        super.onSuccess(msg);                    }                });                httpParams.putGETParams(mapParams);                mHttpCancelable = GXHttpManager.getWithJSON(ReColourActivity.this, GXHttpManager.METHOD_GET, httpParams, new CommonActionCallBackString(ReColourActivity.this) {                    @Override                    public void onSuccess(String msg) {                        Log.e("ReColourActiviy", msg);                        mResponding = false;                        Intent i = new Intent(ReColourActivity.this, MasterActivity.class);                        //关键:需要先关闭内存中已有的MasterActivity,否则其持有的静态bitmap使其不被回收,同时又新创建一个静态bitmap,最终导致oom                       // GActivityManager.getActivityManager().finishActivity(MasterActivity.class);                       // i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);                        startActivity(i);                        finish();                    }                });            }        });    }        //通过webScoket发送摄像头参数  /*    private void sendCameraParam(int paramType, String param) {          if (cameraCMDScoket != null) {               webScoketResult.clear();               webScoketResult.put("type", String.valueOf(paramType));                webScoketResult.put("param", String.valueOf(param));               cameraCMDScoket.send(JSON.toJSONString(webScoketResult));                //            Logger.e("Aye", "type " + paramType + "param " + param);            }       }*/}