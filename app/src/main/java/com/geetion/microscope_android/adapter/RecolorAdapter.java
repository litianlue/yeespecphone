package com.geetion.microscope_android.adapter;import android.content.Context;import android.graphics.Color;import android.graphics.drawable.GradientDrawable;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ArrayAdapter;import android.widget.TextView;import com.geetion.microscope_android.R;import com.geetion.microscope_android.service.DataDepot;import com.geetion.microscope_android.utils.ConstanUtil;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.List;/** * Created by virgilyan on 15/11/23. */public class RecolorAdapter extends ArrayAdapter<String[]> {    private static final String TAG = RecolorAdapter.class.getName();    static List<String[]> colors = new ArrayList<>();    public RecolorAdapter(Context context) {        super(context, 0, colors);        readFromAssets(context);    }    public static void readFromAssets(Context context) {        if (colors.size() == 0) {            InputStream is = null;            try {                is = context.getAssets().open("colors.txt");                readTextFromSDcard(is);            } catch (Exception e) {                // TODO Auto-generated catch block                e.printStackTrace();            } finally {                try {//关闭资源输入输出流 :                    if (is != null) {                        is.close();                    }                } catch (IOException e) {                    e.printStackTrace();                }            }        }    }    /**     * 按行读取txt     *     * @param is     * @return     * @throws Exception     */    private static String readTextFromSDcard(InputStream is) {        colors.clear();        InputStreamReader reader = new InputStreamReader(is);        BufferedReader bufferedReader = new BufferedReader(reader);        StringBuffer buffer = new StringBuffer("");        String str;        int i = 0;        try {            while ((str = bufferedReader.readLine()) != null) {                buffer.append(str);                buffer.append("\n");                String[] strings = str.split(",");                colors.add(strings);                i++;            }        } catch (IOException e) {            e.printStackTrace();        } finally {            try {//关闭资源输入输出流 :                if (bufferedReader != null) {                    bufferedReader.close();                }            } catch (IOException e) {                e.printStackTrace();            } finally {                try {//关闭资源输入输出流 :                    if (reader != null) {                        reader.close();                    }                } catch (IOException e) {                    e.printStackTrace();                } finally {                }            }        }        return buffer.toString();    }    @Override    public View getView(int position, View convertView, ViewGroup parent) {        ViewHolder holder;        if (convertView == null) {            convertView = LayoutInflater.from(getContext()).inflate(R.layout.item_recolor_setting, null);            holder = new ViewHolder(convertView);            holder.setMiddleGrad();            convertView.setTag(holder);        } else {            holder = (ViewHolder) convertView.getTag();        }        if (ConstanUtil.currentRecolorPosition == position) {            Log.i("test", "RecolorAdapter getView ! true Index = " +ConstanUtil.currentRecolorPosition);            holder.getBottomGrad().setColor(getContext().getResources().getColor(R.color.BLACK));            holder.getBackgroundGrad().setColor(getContext().getResources().getColor(R.color.BLACK));            holder.getColorNameView().setTextColor(getContext().getResources().getColor(R.color.WHITE));        } else {            Log.i("test", "RecolorAdapter getView ! false Index = " + Integer.valueOf(DataDepot.recolor) + " position = " + position);            holder.getBottomGrad().setColor(getContext().getResources().getColor(R.color.RECOLOR_NO_SELECT));            holder.getBackgroundGrad().setColor(getContext().getResources().getColor(R.color.RECOLOR_NO_SELECT));            holder.getColorNameView().setTextColor(getContext().getResources().getColor(R.color.RECOLOR_TEXT));        }        holder.getLabelGrad().setColor(Color.rgb(Integer.parseInt(colors.get(position)[0]), Integer.parseInt(colors.get(position)[1]), Integer.parseInt(colors.get(position)[2])));        holder.getColorNameView().setText(colors.get(position)[4]);        return convertView;    }    private class ViewHolder {        private View view;        private View colorLabelView;        private TextView colorNameView;        private View colorBackgroundView;        private View textBackgroundView;        private View middleView;        private GradientDrawable backgroundGrad;        private GradientDrawable labelGrad;        private GradientDrawable bottomGrad;        private float[] backgroundRadii = new float[]{20, 20, 20, 20, 0, 0, 0, 0};        private float[] bottomRadii = new float[]{0, 0, 0, 0, 20, 20, 20, 20};        private float[] labelRadii = new float[]{20, 20, 20, 20, 20, 20, 20, 20};        public ViewHolder(View view) {            this.view = view;        }        public View getColorLabelView() {            if (colorLabelView == null) {                colorLabelView = view.findViewById(R.id.color_label);                GradientDrawable grad = new GradientDrawable();                grad.setCornerRadii(labelRadii);                colorLabelView.setBackground(grad);            }            return colorLabelView;        }        public TextView getColorNameView() {            if (colorNameView == null)                colorNameView = (TextView) view.findViewById(R.id.color_text);            return colorNameView;        }        public View getColorBackgroundView() {            if (colorBackgroundView == null) {                colorBackgroundView = view.findViewById(R.id.color_background);                GradientDrawable grad = new GradientDrawable();                grad.setCornerRadii(backgroundRadii);                colorBackgroundView.setBackground(grad);            }            return colorBackgroundView;        }        public View getTextBackgroundView() {            if (textBackgroundView == null) {                textBackgroundView = view.findViewById(R.id.text_background);                GradientDrawable grad = new GradientDrawable();                grad.setCornerRadii(bottomRadii);                textBackgroundView.setBackground(grad);            }            return textBackgroundView;        }        public View getMiddleView() {            if (middleView == null) {                middleView = view.findViewById(R.id.middle_view);                GradientDrawable grad = new GradientDrawable();                grad.setCornerRadii(backgroundRadii);                middleView.setBackground(grad);            }            return middleView;        }        public GradientDrawable getBackgroundGrad() {            if (backgroundGrad == null) {                backgroundGrad = (GradientDrawable) getColorBackgroundView().getBackground();            }            return backgroundGrad;        }        public void setMiddleGrad() {            if (middleView == null) {                middleView = view.findViewById(R.id.middle_view);                GradientDrawable grad = new GradientDrawable();                grad.setCornerRadii(backgroundRadii);                grad.setColor(getContext().getResources().getColor(R.color.recolor_item_background));                middleView.setBackground(grad);            }        }        public GradientDrawable getLabelGrad() {            if (labelGrad == null) {                labelGrad = (GradientDrawable) getColorLabelView().getBackground();            }            return labelGrad;        }        public GradientDrawable getBottomGrad() {            if (bottomGrad == null) {                bottomGrad = (GradientDrawable) getTextBackgroundView().getBackground();            }            return bottomGrad;        }    }    //2016.08.03 :　新增 :    public int getColor(int position) {        int color = 0;        if (colors.size() <= position) {    //说明已经超出了color的范围 .            return color;        }        color = Color.rgb(Integer.parseInt(colors.get(position)[0]),                Integer.parseInt(colors.get(position)[1]),                Integer.parseInt(colors.get(position)[2]));        return color;    }    public String getColorString(int position){        String str="No-Color";        if(colors.size()<=position){            return str;        }        str = colors.get(position)[4];        return str;    }}