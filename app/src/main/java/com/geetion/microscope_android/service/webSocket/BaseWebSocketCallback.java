package com.geetion.microscope_android.service.webSocket;import android.app.Activity;import android.app.Dialog;import android.content.Context;import android.content.Intent;import android.os.Process;import android.util.Log;import android.widget.Toast;import com.geetion.log.Logger;import com.geetion.microscope_android.activity.MasterActivity;import com.geetion.microscope_android.application.BaseApplication;import com.geetion.microscope_android.callback.LoginCallBack;import com.geetion.microscope_android.service.Constant;import com.geetion.microscope_android.utils.CallBackUtils;import com.geetion.microscope_android.utils.ConstanUtil;import com.geetion.microscope_android.yeespec.LoginDialog;import com.koushikdutta.async.callback.CompletedCallback;import com.koushikdutta.async.future.Future;import com.koushikdutta.async.http.AsyncHttpClient;import com.koushikdutta.async.http.WebSocket;import java.util.concurrent.ScheduledExecutorService;import java.util.concurrent.ScheduledThreadPoolExecutor;import java.util.concurrent.TimeUnit;/** * Created by WongzYe on 15/12/18. */public class BaseWebSocketCallback implements AsyncHttpClient.WebSocketConnectCallback,LoginCallBack {    private static ScheduledExecutorService executorService = new ScheduledThreadPoolExecutor(1);    private String name;    private Context context;    private Activity mActivity;    private Future<WebSocket> webScoket;    private boolean firstlogin = true;    private int reConnectCount =0;    public BaseWebSocketCallback(Activity activity, Future<WebSocket> ws) {        this.context = activity;        this.mActivity = activity;        name = context.getClass().getSimpleName();        webScoket = ws;        CallBackUtils.setCallBack(this);        if(ConstanUtil.firstLogin) {            backToLogin();            ConstanUtil.firstLogin = false;        }    }    @Override    public void onCompleted(final Exception ex, WebSocket ws) {        Logger.e("Aye", name + " onCompleted");        BaseApplication.closeBySelf = false;        if (ex != null) {            //            System.out.println("getPicture got an error");            ((Activity) context).runOnUiThread(new Runnable() {                @Override                public void run() {                    Logger.e("Aye", Constant.WS_URI);                    //UIUtil.toast(context, "WebScoket1 " + ex.toString());                }            });            ex.printStackTrace();            webScoket = null;           // backToLogin();            return;        }        ws.setEndCallback(new CompletedCallback() {            @Override            public void onCompleted(final Exception ex) {            //    Logger.e("Aye", name + " setEndCallback " + BaseApplication.closeBySelf);                if (!BaseApplication.closeBySelf) {                    backToLogin();                  //  Log.e("BaseWebSocketCallback", ">>>>>>>>>>>>>1");                }                if (ex != null) {                    ((Activity) context).runOnUiThread(new Runnable() {                        @Override                        public void run() {                            Logger.e("Aye", Constant.WS_URI);                            //UIUtil.toast(context, "WebScoket2 " + ex.toString());                        }                    });                    ex.printStackTrace();                    webScoket = null;                    backToLogin();                  //  Log.e("BaseWebSocketCallback", ">>>>>>>>>>>>>2");                    return;                }            }        });        ws.setClosedCallback(new CompletedCallback() {            @Override            public void onCompleted(final Exception ex) {                Logger.e("Aye", name + " setClosedCallback " + BaseApplication.closeBySelf);                if (!BaseApplication.closeBySelf) {                    backToLogin();                  //  Log.e("BaseWebSocketCallback", ">>>>>>>>>>>>>3");                }                if (ex != null) {                    ((Activity) context).runOnUiThread(new Runnable() {                        @Override                        public void run() {                            Logger.e("Aye", Constant.WS_URI);                          //  UIUtil.toast(context, "WebScoket3 " + ex.toString());                        }                    });                    ex.printStackTrace();                   // webScoket = null;                    backToLogin();                    Log.e("BaseWebSocketCallback", ">>>>>>>>>>>>>4");                    return;                }            }        });    }    private void backToLogin() {        if (!MasterActivity.isExit) {            //2016.08.03 : 修改切换连接界面为弹窗切换连接 :            //2016.08.03 : 添加连接平板的弹窗 :            executorService.schedule(new Runnable() {                @Override                public void run() {                    mActivity.runOnUiThread(new Runnable() {                        @Override                        public void run() {                                if (ConstanUtil.islogin) {                                    reConnectCount++;                                    if (reConnectCount >6 ) {//允许重连接5次                                        reConnectCount = 0;                                        ConstanUtil.islogin = false;                                    }                                    LoginDialog.reConnectService(ConstanUtil.connectip);                                    Intent i = new Intent(context, MasterActivity.class);                                    i.putExtra("islogin",true);                                    i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);                                    context.startActivity(i);                                } else {                                                                     if(ConstanUtil.isSuccessLogin){//如果服务器端异常并已经登录则退出                                        Toast.makeText(mActivity, "网络异常，请重新登录", Toast.LENGTH_SHORT).show();                                        android.os.Process.killProcess(Process.myPid());                                    }                                    Dialog loginDialog = LoginDialog.getLoginDialog(mActivity);                                    loginDialog.show();                                    reConnectCount=0;                                }                        }                    });                }            }, 1000, TimeUnit.MILLISECONDS);            Logger.e("Aye", "backToLogin " + "MasterActivity.isExit " + MasterActivity.isExit + " BaseApplication.closeBySelf " + BaseApplication.closeBySelf);        }    }    @Override    public void LogindResult(boolean result) {          if(!result){             mActivity.runOnUiThread(new Runnable() {                 @Override                 public void run() {                     //登录超时                     Toast.makeText(mActivity, "请检查网络或者IP", Toast.LENGTH_SHORT).show();                     Dialog loginDialog = LoginDialog.getLoginDialog(mActivity);                     loginDialog.show();                 }             });          }    }}