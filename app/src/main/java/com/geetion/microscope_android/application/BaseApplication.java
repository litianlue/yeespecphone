package com.geetion.microscope_android.application;import android.app.Activity;import android.app.Application;import android.content.Context;import android.support.multidex.MultiDex;import com.avos.avoscloud.AVOSCloud;import com.facebook.drawee.backends.pipeline.Fresco;import com.facebook.imagepipeline.backends.okhttp.OkHttpImagePipelineConfigFactory;import com.facebook.imagepipeline.core.ImagePipelineConfig;import com.geetion.log.LogLevel;import com.geetion.log.Logger;import com.geetion.microscope_android.service.CheckBatteryService;import com.geetion.microscope_android.service.Constant;import com.geetion.microscope_android.utils.PollingUtils;import com.squareup.leakcanary.LeakCanary;import com.squareup.okhttp.OkHttpClient;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.List;import java.util.concurrent.TimeUnit;/** * Created by virgilyan on 15/7/1. */public class BaseApplication extends Application {    private static final String TAG = BaseApplication.class.getName();    public static final int DEFAULT_WIDTH = 640;    public static final int DEFAULT_HEIGHT = 480;    public static final List<String[]> COLORS = new ArrayList<>();    public static boolean closeBySelf;    private final String APP_ID = "895a6GU3rutpnpo1AtBAmT6a-gzGzoHsz";    private final String APP_KEY = "6fxxrUedtuH7Bg8jUC0oC1hO";    @Override    public void onCreate() {        super.onCreate();        //检测内存泄露初始化       /* if (LeakCanary.isInAnalyzerProcess(this)) {            // This process is dedicated to LeakCanary for heap analysis.            // You should not init your app in this process.            return;        }        LeakCanary.install(this);*/        MultiDex.install(this);        // 启用中国节点, 需要在 initialize 之前调用        AVOSCloud.useAVCloudCN();        AVOSCloud.initialize(this,APP_ID,APP_KEY);        COLORS.clear();        mContext = this;        readFromAssets(this);        //初始化fresco        OkHttpClient okHttpClient = new OkHttpClient();        okHttpClient.setConnectTimeout(20L, TimeUnit.SECONDS);        okHttpClient.setWriteTimeout(20L, TimeUnit.SECONDS);        okHttpClient.setReadTimeout(20L, TimeUnit.SECONDS);        ImagePipelineConfig config = OkHttpImagePipelineConfigFactory.newBuilder(this, okHttpClient).build();        Fresco.initialize(this, config);        //初始化xutils        org.xutils.x.Ext.init(this);        //Logger初始化        Logger.Settings loggerSetting = Logger.init("Geetion.Inc");        if (Constant.DEBUG) {            loggerSetting.setLogLevel(LogLevel.FULL);        } else {            loggerSetting.setLogLevel(LogLevel.NONE);        }        //开启电量检查服务        PollingUtils.startPollingService(this, 60 * 30, CheckBatteryService.class, CheckBatteryService.ACTION);    }    private static Context mContext;    public static void setContext(Activity mContext) {        BaseApplication.mContext = mContext;    }    public static Context getContext() {        return mContext;    }    public static void readFromAssets(Context context) {        if (COLORS.size() == 0) {            InputStream is = null;            try {                is = context.getAssets().open("colors.txt");                readTextFromSDcard(is);            } catch (Exception e) {                // TODO Auto-generated catch block                e.printStackTrace();            } finally {                try {//关闭资源输入输出流 :                    if (is != null) {                        is.close();                    }                } catch (IOException e) {                    e.printStackTrace();                } finally {                }            }        }    }    /**     * 按行读取txt     *     * @param is     * @return     * @throws Exception     */    private static String readTextFromSDcard(InputStream is) {        COLORS.clear();        InputStreamReader reader = new InputStreamReader(is);        BufferedReader bufferedReader = new BufferedReader(reader);        StringBuffer buffer = new StringBuffer("");        String str;        int i = 0;        try {            while ((str = bufferedReader.readLine()) != null) {                buffer.append(str);                buffer.append("\n");                String[] strings = str.split(",");                COLORS.add(strings);                i++;            }        } catch (IOException e) {            e.printStackTrace();        } finally {            try {//关闭资源输入输出流 :                if (bufferedReader != null) {                    bufferedReader.close();                }            } catch (IOException e) {                e.printStackTrace();            } finally {                try {//关闭资源输入输出流 :                    if (reader != null) {                        reader.close();                    }                } catch (IOException e) {                    e.printStackTrace();                } finally {                }            }        }        return buffer.toString();    }    @Override    public void onLowMemory() {        super.onLowMemory();    }    @Override    public void onTerminate() {        super.onTerminate();    }    @Override    public void onTrimMemory(int level) {        super.onTrimMemory(level);    }}